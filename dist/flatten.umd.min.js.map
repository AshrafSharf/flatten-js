{"version":3,"sources":["webpack://flatten/webpack/universalModuleDefinition","webpack://flatten/webpack/bootstrap","webpack://flatten/./node_modules/flatten-interval-tree/utils/constants.js","webpack://flatten/./node_modules/flatten-interval-tree/index.js","webpack://flatten/./algorithms/distance.js","webpack://flatten/./classes/polygon.js","webpack://flatten/./algorithms/ray_shooting.js","webpack://flatten/./classes/ray.js","webpack://flatten/./classes/face.js","webpack://flatten/./classes/edge.js","webpack://flatten/./classes/box.js","webpack://flatten/./classes/arc.js","webpack://flatten/./classes/segment.js","webpack://flatten/./classes/circle.js","webpack://flatten/./classes/line.js","webpack://flatten/./classes/vector.js","webpack://flatten/./classes/point.js","webpack://flatten/./node_modules/flatten-interval-tree/classes/interval.js","webpack://flatten/./node_modules/flatten-interval-tree/classes/node.js","webpack://flatten/./data_structures/planar_set.js","webpack://flatten/./classes/matrix.js","webpack://flatten/./utils/errors.js","webpack://flatten/./utils/utils.js","webpack://flatten/./index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","RB_TREE_COLOR_RED","RB_TREE_COLOR_BLACK","Node","nil_node","[object Object]","this","size","count","tree_walk","keys","res","node","push","item","key","output","isEmpty","undefined","insert_node","tree_insert","recalc_max","search_node","tree_search","delete_node","tree_delete","interval","resp_nodes","tree_search_interval","resp","forEach","visitor","node_current","parent","update_max","current_node","parent_node","less_than","left","right","insert_fixup","uncle_node","color","rotate_left","rotate_right","cut_node","fix_node","tree_successor","copy_data","delete_fixup","brother_node","equal_to","not_intersect_left_subtree","intersect","not_intersect_right_subtree","node_min","node_max","node_successor","local_minimum","x","y","action","height","heightLeft","heightRight","testBlackHeightProperty","Error","IntervalTree","Flatten","Polygon","Point","Segment","Arc","Circle","Line","Ray","Vector","vector","Distance","pt1","pt2","distanceTo","pt","line","closest_point","projectionOn","length","circle","dist2center","shortest_dist","center","Utils","EQ_0","toArc","start","dist","Math","abs","v","pc","normalize","multiply","translate","segment","equalTo","end","point2point","v_seg","v_ps2pt","v_pe2pt","start_sp","dot","end_sp","GE","v_unit","tangentInStart","cross","arc","shortest_segment","dist_and_segment","point2circle","on","sort","seg","ip","point2line","seg1","seg2","intersectSegment2Segment","point2segment","ps","pe","dist_from_start","shortest_segment_from_start","dist_from_end","shortest_segment_from_end","LT","dist_from_center","shortest_segment_from_center","dist_from_projection","shortest_segment_from_projection","dist_tmp","segment_tmp","point2arc","reverse","circle1","circle2","arc1","arc2","ip1","ip2","circle2circle","point","polygon","min_dist_and_segment","Number","POSITIVE_INFINITY","edge","edges","shape","polygon1","polygon2","edge1","edge2","box1","box2","mindist_x","max","xmin","xmax","mindist_y","ymin","ymax","mindist","box","merge","dx","dy","level","min_stop","tree","maxdist","box2box_minmax","Edge","insert","new_level_left","map","isNil","filter","new_level_right","new_level","LE","minmax_tree_process_level","set","index","squared_min_stop","min_dist_and_segment_new","stop","minmax_tree_calc_distance","sqrt","low","distance","PlanarSet","minmax_tree","d1","d2","GT","shape1","shape2","Face","Box","ray_shoot","faces","reduce","acc","face","vertices","args","add","delete","edgeFrom","edgeTo","next","remove","deleteFace","shapes","split","newEdge","edgeBefore","prev","clone","addFace","signedArea","rel","INSIDE","BOUNDARY","point2polygon","shape2polygon","shape2planarSet","valid","isSimple","vec","newPolygon","angle","rotate","matrix","Matrix","transform","attrs","stroke","strokeWidth","fill","fillRule","fillOpacity","id","className","id_str","class_str","svgStr","svg","toJSON","contains","notIntersect","OUTSIDE","ray","norm","resp_edges","search","intersections","i1","i2","counter","intersection","prev_tangent","tangentInEnd","prev_point","cur_tangent","cur_point","prev_on_the_left","leftTo","cur_on_the_left","next_tangent","next_point","next_on_the_left","EQ","Errors","ILLEGAL_PARAMETERS","intersectRay2Segment","intersectRay2Arc","ip_tmp","first","last","_box","_orientation","Array","every","segments","points2segments","shapes2face","flattenShapes","flattenShape","startAngle","endAngle","counterClockwise","setArcLength","Symbol","iterator","done","face_edges","points","append","arc_length","edgeAfter","edge_tmp","orientation","sArea","definiteIntegral","area","ORIENTATION","NOT_ORIENTABLE","CCW","CW","bv","bvStart","bvEnd","bvThisInOther","setInclusion","polyTmp","numInsideThis","CONTAINS","INTERLACE","getSelfIntersections","exitOnFirst","int_points","overlap","middle","bvMiddle","flag","OVERLAP_SAME","OVERLAP_OPPOSITE","largeArcFlag","sweepFlag","sweep","PI","sign","halfArc1","halfArc2","json","high","other_box","min","lessThan","width","PIx2","breakToFunctional","slope","test_arc","cos","intersectArc2Circle","intersectArc2Arc","arc2circle","arc2line","segment2arc","arc2arc","func_arcs_array","angles","pts","test_arcs","new_arc","prev_arc","newStart","newEnd","newCenter","arcSE","circularSegmentDefiniteIntegral","onLeftSide","areaTrapez","areaCircularSegment","circularSegmentArea","sin","coords","distanceToPoint","intersectSegment2Line","intersectSegment2Circle","intersectSegment2Arc","segment2circle","segment2line","segment2segment","rest","isZeroLength","line1","line2","incidentTo","new_ip","ips","ips_tmp","counterclockwise","intersectCirle2Circle","circle2line","r1","r2","a","mid_pt","h","rotate90CCW","rotate90CW","a1","a2","points2norm","standard","other_line","parallelTo","intersectLine2Line","intersectLine2Circle","intersectLine2Arc","intersectLine2Box","find","A1","B1","C1","A2","B2","C2","det","detX","detY","prj","v_trans","delta","segs","arr","atan2","scalar","ZERO_DIVISION","rpoint","norm1","norm2","x_rot","y_rot","proj_vec","Interval","other_interval","not_intersect","val1","val2","isNaN","other_node","value_equal","maximal_val","val_less_than","Set","super","deleted","b","tx","ty","other_matrix","sx","sy","ReferenceError","DP_TOL","f","PI_2","CLIP_INSIDE","CLIP_OUTSIDE","BOOLEAN_UNION","BOOLEAN_INTERSECT","BOOLEAN_SUBTRACT"],"mappings":"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","file":"flatten.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flatten\"] = factory();\n\telse\n\t\troot[\"flatten\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","/**\r\n * Created by Alex Bol on 3/28/2017.\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = {\r\n    RB_TREE_COLOR_RED: 0,\r\n    RB_TREE_COLOR_BLACK: 1\r\n};","/**\r\n * Created by Alex Bol on 3/31/2017.\r\n */\r\n'use strict';\r\n\r\nlet Node = require('./classes/node');\r\nlet {RB_TREE_COLOR_RED, RB_TREE_COLOR_BLACK} = require('./utils/constants');\r\n\r\nlet nil_node = new Node();\r\n\r\n/**\r\n * Implementation of interval binary search tree <br/>\r\n * Interval tree may store items which are couples of {key:interval, value: value} <br/>\r\n * Interval is an object with high and low properties or simply array of numeric [low,high] values <br />\r\n * If interval is an object, it should implement and expose methods less_than, equals_to, intersect and others,\r\n * see documentation {link}\r\n * @type {IntervalTree}\r\n */\r\nlet IntervalTree = class IntervalTree {\r\n    /**\r\n     * Construct new empty instance of IntervalTree\r\n     */\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    /**\r\n     * Returns number of items stored in the interval tree\r\n     * @returns {number}\r\n     */\r\n    get size() {\r\n        let count = 0;\r\n        this.tree_walk(this.root, () => count++);\r\n        return count;\r\n    }\r\n\r\n    get keys() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(node.item.key.output()));\r\n        return res;\r\n    }\r\n\r\n    get isEmpty() {\r\n        return (this.root == null || this.root == nil_node);\r\n    }\r\n\r\n    /**\r\n     * Insert new item into interval tree\r\n     * @param key - interval object or array of two numbers [low, high]\r\n     * @param value - value representing any object (optional)\r\n     * @returns {Node} - returns reference to inserted node as an object {key:interval, value: value}\r\n     */\r\n    insert(key, value = key) {\r\n        if (key === undefined) return;\r\n        let insert_node = new Node(key, value, nil_node, nil_node, null, RB_TREE_COLOR_RED);\r\n        this.tree_insert(insert_node);\r\n        this.recalc_max(insert_node);\r\n        return insert_node;\r\n    }\r\n\r\n    /**\r\n     * Returns true if item {key,value} exist in the tree\r\n     * @param key - interval correspondent to keys stored in the tree\r\n     * @param value - value object to be checked\r\n     * @returns {boolean} - true if item {key, value} exist in the tree, false otherwise\r\n     */\r\n    exist(key, value) {\r\n        let search_node = new Node(key, value);\r\n        return this.tree_search(this.root, search_node) ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Remove entry {key, value} from the tree\r\n     * @param key - interval correspondent to keys stored in the tree\r\n     * @param value - - value object\r\n     * @returns {boolean} - true if item {key, value} deleted, false if not found\r\n     */\r\n    remove(key, value) {\r\n        let search_node = new Node(key, value);\r\n        let delete_node = this.tree_search(this.root, search_node);\r\n        if (delete_node) {\r\n            this.tree_delete(delete_node);\r\n        }\r\n        return delete_node;\r\n    }\r\n\r\n    /**\r\n     * Returns array of entry values which keys intersect with given interval <br/>\r\n     * If no values stored in the tree, returns array of keys which intersect given interval\r\n     * @param interval - search interval, or array [low, high]\r\n     * @returns {Array}\r\n     */\r\n    search(interval) {\r\n        let search_node = new Node(interval);\r\n        let resp_nodes = [];\r\n        this.tree_search_interval(this.root, search_node, resp_nodes);\r\n        let resp = [];\r\n        resp_nodes.forEach((node) => {\r\n            if (node.item.value) {         // if there are values, return only values\r\n                resp.push(node.item.value);\r\n            }\r\n            else {                         // otherwise, return keys\r\n                resp.push(node.item.key.output());\r\n            }\r\n        }, []);\r\n        return resp;\r\n    }\r\n\r\n    /**\r\n     * Tree visitor. For each node implement a callback function. <br/>\r\n     * Method calls a callback function with two parameters (key, value)\r\n     * @param visitor(key,value) - function to be called for each tree item\r\n     */\r\n    forEach(visitor) {\r\n        this.tree_walk(this.root, (node) => visitor(node.item.key, node.item.value));\r\n    };\r\n\r\n    recalc_max(node) {\r\n        let node_current = node;\r\n        while (node_current.parent != null) {\r\n            node_current.parent.update_max();\r\n            node_current = node_current.parent;\r\n        }\r\n    }\r\n\r\n    tree_insert(insert_node) {\r\n        let current_node = this.root;\r\n        let parent_node = null;\r\n\r\n        if (this.root == null || this.root == nil_node) {\r\n            this.root = insert_node;\r\n        }\r\n        else {\r\n            while (current_node != nil_node) {\r\n                parent_node = current_node;\r\n                if (insert_node.less_than(current_node)) {\r\n                    current_node = current_node.left;\r\n                }\r\n                else {\r\n                    current_node = current_node.right;\r\n                }\r\n            }\r\n\r\n            insert_node.parent = parent_node;\r\n\r\n            if (insert_node.less_than(parent_node)) {\r\n                parent_node.left = insert_node;\r\n            }\r\n            else {\r\n                parent_node.right = insert_node;\r\n            }\r\n        }\r\n\r\n        this.insert_fixup(insert_node);\r\n    }\r\n\r\n// After insertion insert_node may have red-colored parent, and this is a single possible violation\r\n// Go upwords to the root and re-color until violation will be resolved\r\n    insert_fixup(insert_node) {\r\n        let current_node;\r\n        let uncle_node;\r\n\r\n        current_node = insert_node;\r\n        while (current_node != this.root && current_node.parent.color == RB_TREE_COLOR_RED) {\r\n            if (current_node.parent == current_node.parent.parent.left) {   // parent is left child of grandfather\r\n                uncle_node = current_node.parent.parent.right;              // right brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 1. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {                                                    // Case 2 & 3. Uncle is black\r\n                    if (current_node == current_node.parent.right) {     // Case 2. Current if right child\r\n                        // This case is transformed into Case 3.\r\n                        current_node = current_node.parent;\r\n                        this.rotate_left(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 3. Current is left child.\r\n                    // Re-color father and grandfather, rotate grandfather right\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_right(current_node.parent.parent);\r\n                }\r\n            }\r\n            else {                                                         // parent is right child of grandfather\r\n                uncle_node = current_node.parent.parent.left;              // left brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 4. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {\r\n                    if (current_node == current_node.parent.left) {             // Case 5. Current is left child\r\n                        // Transform into case 6\r\n                        current_node = current_node.parent;\r\n                        this.rotate_right(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 6. Current is right child.\r\n                    // Re-color father and grandfather, rotate grandfather left\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_left(current_node.parent.parent);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.root.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_delete(delete_node) {\r\n        let cut_node;   // node to be cut - either delete_node or successor_node  (\"y\" from 14.4)\r\n        let fix_node;   // node to fix rb tree property   (\"x\" from 14.4)\r\n\r\n        if (delete_node.left == nil_node || delete_node.right == nil_node) {  // delete_node has less then 2 children\r\n            cut_node = delete_node;\r\n        }\r\n        else {                                                    // delete_node has 2 children\r\n            cut_node = this.tree_successor(delete_node);\r\n        }\r\n\r\n        // fix_node if single child of cut_node\r\n        if (cut_node.left != nil_node) {\r\n            fix_node = cut_node.left;\r\n        }\r\n        else {\r\n            fix_node = cut_node.right;\r\n        }\r\n\r\n        // remove cut_node from parent\r\n        /*if (fix_node != nil_node) {*/\r\n            fix_node.parent = cut_node.parent;\r\n        /*}*/\r\n\r\n        if (cut_node == this.root) {\r\n            this.root = fix_node;\r\n        }\r\n        else {\r\n            if (cut_node == cut_node.parent.left) {\r\n                cut_node.parent.left = fix_node;\r\n            }\r\n            else {\r\n                cut_node.parent.right = fix_node;\r\n            }\r\n            cut_node.parent.update_max();        // update max property of the parent\r\n        }\r\n\r\n        this.recalc_max(fix_node);              // update max property upward from fix_node to root\r\n\r\n        // COPY DATA !!!\r\n        // Delete_node becomes cut_node, it means that we cannot hold reference\r\n        // to node in outer structure and we will have to delete by key, additional search need\r\n        if (cut_node != delete_node) {\r\n            delete_node.copy_data(cut_node);\r\n            delete_node.update_max();           // update max property of the cut node at the new place\r\n            this.recalc_max(delete_node);       // update max property upward from delete_node to root\r\n        }\r\n\r\n        if (/*fix_node != nil_node && */cut_node.color == RB_TREE_COLOR_BLACK) {\r\n            this.delete_fixup(fix_node);\r\n        }\r\n    }\r\n\r\n    delete_fixup(fix_node) {\r\n        let current_node = fix_node;\r\n        let brother_node;\r\n\r\n        while (current_node != this.root && current_node.parent != null && current_node.color == RB_TREE_COLOR_BLACK) {\r\n            if (current_node == current_node.parent.left) {          // fix node is left child\r\n                brother_node = current_node.parent.right;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_left(current_node.parent);\r\n                    brother_node = current_node.parent.right;                      // update brother\r\n                }\r\n                // Derive to cases 2..4: brother is black\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {  // case 2: both nephews black\r\n                    brother_node.color = RB_TREE_COLOR_RED;              // re-color brother\r\n                    current_node = current_node.parent;                  // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 3: left nephew red, right nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;          // re-color brother\r\n                        brother_node.left.color = RB_TREE_COLOR_BLACK;   // re-color nephew\r\n                        this.rotate_right(brother_node);\r\n                        brother_node = current_node.parent.right;                     // update brother\r\n                        // Derive to case 4: left nephew black, right nephew red\r\n                    }\r\n                    // case 4: left nephew black, right nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.right.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_left(current_node.parent);\r\n                    current_node = this.root;                         // exit from loop\r\n                }\r\n            }\r\n            else {                                             // fix node is right child\r\n                brother_node = current_node.parent.left;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_right(current_node.parent);\r\n                    brother_node = current_node.parent.left;                        // update brother\r\n                }\r\n                // Go to cases 2..4\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 2\r\n                    brother_node.color = RB_TREE_COLOR_RED;             // re-color brother\r\n                    current_node = current_node.parent;                              // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.left.color == RB_TREE_COLOR_BLACK) {  // case 3: right nephew red, left nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;            // re-color brother\r\n                        brother_node.right.color = RB_TREE_COLOR_BLACK;    // re-color nephew\r\n                        this.rotate_left(brother_node);\r\n                        brother_node = current_node.parent.left;                        // update brother\r\n                        // Derive to case 4: right nephew black, left nephew red\r\n                    }\r\n                    // case 4: right nephew black, left nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.left.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_right(current_node.parent);\r\n                    current_node = this.root;                               // force exit from loop\r\n                }\r\n            }\r\n        }\r\n\r\n        current_node.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_search(node, search_node) {\r\n        if (node == null || node == nil_node)\r\n            return undefined;\r\n\r\n        if (search_node.equal_to(node)) {\r\n            return node;\r\n        }\r\n        if (search_node.less_than(node)) {\r\n            return this.tree_search(node.left, search_node);\r\n        }\r\n        else {\r\n            return this.tree_search(node.right, search_node);\r\n        }\r\n    }\r\n\r\n    // Original search_interval method; container res support push() insertion\r\n    // Search all intervals intersecting given one\r\n    tree_search_interval(node, search_node, res) {\r\n        if (node != null && node != nil_node) {\r\n            // if (node->left != nil_node && node->left->max >= low) {\r\n            if (node.left != nil_node && !node.not_intersect_left_subtree(search_node)) {\r\n                this.tree_search_interval(node.left, search_node, res);\r\n            }\r\n            // if (low <= node->high && node->low <= high) {\r\n            if (node.intersect(search_node)) {\r\n                res.push(node);\r\n            }\r\n            // if (node->right != nil_node && node->low <= high) {\r\n            if (node.right != nil_node && !node.not_intersect_right_subtree(search_node)) {\r\n                this.tree_search_interval(node.right, search_node, res);\r\n            }\r\n        }\r\n    }\r\n\r\n    local_minimum(node) {\r\n        let node_min = node;\r\n        while (node_min.left != null && node_min.left != nil_node) {\r\n            node_min = node_min.left;\r\n        }\r\n        return node_min;\r\n    }\r\n\r\n    // not in use\r\n    local_maximum(node) {\r\n        let node_max = node;\r\n        while (node_max.right != null && node_max.right != nil_node) {\r\n            node_max = node_max.right;\r\n        }\r\n        return node_max;\r\n    }\r\n\r\n    tree_successor(node) {\r\n        let node_successor;\r\n        let current_node;\r\n        let parent_node;\r\n\r\n        if (node.right != nil_node) {\r\n            node_successor = this.local_minimum(node.right);\r\n        }\r\n        else {\r\n            current_node = node;\r\n            parent_node = node.parent;\r\n            while (parent_node != null && parent_node.right == current_node) {\r\n                current_node = parent_node;\r\n                parent_node = parent_node.parent;\r\n            }\r\n            node_successor = parent_node;\r\n        }\r\n        return node_successor;\r\n    }\r\n\r\n    //           |            right-rotate(T,y)       |\r\n    //           y            ---------------.       x\r\n    //          / \\                                  / \\\r\n    //         x   c          left-rotate(T,x)      a   y\r\n    //        / \\             <---------------         / \\\r\n    //       a   b                                    b   c\r\n\r\n    rotate_left(x) {\r\n        let y = x.right;\r\n\r\n        x.right = y.left;           // b goes to x.right\r\n\r\n        if (y.left != nil_node) {\r\n            y.left.parent = x;     // x becomes parent of b\r\n        }\r\n        y.parent = x.parent;       // move parent\r\n\r\n        if (x == this.root) {\r\n            this.root = y;           // y becomes root\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (x == x.parent.left) {\r\n                x.parent.left = y;\r\n            }\r\n            else {\r\n                x.parent.right = y;\r\n            }\r\n        }\r\n        y.left = x;                 // x becomes left child of y\r\n        x.parent = y;               // and y becomes parent of x\r\n\r\n        if (x != null && x != nil_node) {\r\n            x.update_max();\r\n        }\r\n\r\n        y = x.parent;\r\n        if (y != null && y != nil_node) {\r\n            y.update_max();\r\n        }\r\n    }\r\n\r\n    rotate_right(y) {\r\n        let x = y.left;\r\n\r\n        y.left = x.right;           // b goes to y.left\r\n\r\n        if (x.right != nil_node) {\r\n            x.right.parent = y;        // y becomes parent of b\r\n        }\r\n        x.parent = y.parent;          // move parent\r\n\r\n        if (y == this.root) {        // x becomes root\r\n            this.root = x;\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (y == y.parent.left) {\r\n                y.parent.left = x;\r\n            }\r\n            else {\r\n                y.parent.right = x;\r\n            }\r\n        }\r\n        x.right = y;                 // y becomes right child of x\r\n        y.parent = x;               // and x becomes parent of y\r\n\r\n        if (y != null && y != nil_node) {\r\n            y.update_max();\r\n        }\r\n\r\n        x = y.parent;\r\n        if (x != null && x != nil_node) {\r\n            x.update_max();\r\n        }\r\n    }\r\n\r\n    tree_walk(node, action) {\r\n        if (node != null && node != nil_node) {\r\n            this.tree_walk(node.left, action);\r\n            // arr.push(node.toArray());\r\n            action(node);\r\n            this.tree_walk(node.right, action);\r\n        }\r\n    }\r\n\r\n    /* Return true if all red nodes have exactly two black child nodes */\r\n    testRedBlackProperty() {\r\n        let res = true;\r\n        this.tree_walk(this.root, function (node) {\r\n            if (node.color == RB_TREE_COLOR_RED) {\r\n                if (!(node.left.color == RB_TREE_COLOR_BLACK && node.right.color == RB_TREE_COLOR_BLACK)) {\r\n                    res = false;\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    /* Throw error if not every path from root to bottom has same black height */\r\n    testBlackHeightProperty(node) {\r\n        let height = 0;\r\n        let heightLeft = 0;\r\n        let heightRight = 0;\r\n        if (node.color == RB_TREE_COLOR_BLACK) {\r\n            height++;\r\n        }\r\n        if (node.left != nil_node) {\r\n            heightLeft = this.testBlackHeightProperty(node.left);\r\n        }\r\n        else {\r\n            heightLeft = 1;\r\n        }\r\n        if (node.right != nil_node) {\r\n            heightRight = this.testBlackHeightProperty(node.right);\r\n        }\r\n        else {\r\n            heightRight = 1;\r\n        }\r\n        if (heightLeft != heightRight) {\r\n            throw new Error('Red-black height property violated');\r\n        }\r\n        height += heightLeft;\r\n        return height;\r\n    };\r\n};\r\n\r\nmodule.exports = IntervalTree;\r\n","\"use strict\";\n\nlet IntervalTree = require('flatten-interval-tree');\n\nmodule.exports = function(Flatten) {\n    let {Polygon, Point, Segment, Arc, Circle, Line, Ray, Vector} = Flatten;\n\n    let {vector} = Flatten;\n\n    Flatten.Distance = class Distance {\n        /**\n         * Calculate distance and shortest segment between points\n         * @param pt1\n         * @param pt2\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static point2point(pt1, pt2) {\n            return pt1.distanceTo(pt2);\n        }\n\n        /**\n         * Calculate distance and shortest segment between point and line\n         * @param pt\n         * @param line\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static point2line(pt, line) {\n            let closest_point = pt.projectionOn(line);\n            let vec = vector(pt, closest_point);\n            return [vec.length, new Segment(pt, closest_point)];\n        }\n\n        /**\n         * Calculate distance and shortest segment between point and circle\n         * @param pt\n         * @param circle\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static point2circle(pt, circle) {\n            let [dist2center, shortest_dist] = pt.distanceTo(circle.center);\n            if (Flatten.Utils.EQ_0(dist2center)) {\n                return [circle.r, new Segment(pt, circle.toArc().start)];\n            }\n            else {\n                let dist = Math.abs(dist2center - circle.r);\n                let v = vector(circle.pc, pt).normalize().multiply(circle.r);\n                let closest_point = circle.pc.translate(v);\n                return [dist, new Segment(pt, closest_point)];\n            }\n        }\n\n        /**\n         * Calculate distance and shortest segment between point and segment\n         * @param pt\n         * @param segment\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static point2segment(pt, segment) {\n            /* Degenerated case of zero-length segment */\n            if (segment.start.equalTo(segment.end)) {\n                return  Distance.point2point(pt, segment.start);\n            }\n\n            let v_seg = new Flatten.Vector(segment.start, segment.end);\n            let v_ps2pt = new Flatten.Vector(segment.start, pt);\n            let v_pe2pt = new Flatten.Vector(segment.end, pt);\n            let start_sp = v_seg.dot(v_ps2pt);\n            /* dot product v_seg * v_ps2pt */\n            let end_sp = -v_seg.dot(v_pe2pt);\n            /* minus dot product v_seg * v_pe2pt */\n\n            let dist;\n            let closest_point;\n            if (Flatten.Utils.GE(start_sp, 0) && Flatten.Utils.GE(end_sp, 0)) {    /* point inside segment scope */\n                let v_unit = segment.tangentInStart(); // new Flatten.Vector(v_seg.x / this.length, v_seg.y / this.length);\n                /* unit vector ||v_unit|| = 1 */\n                dist = Math.abs(v_unit.cross(v_ps2pt));\n                /* dist = abs(v_unit x v_ps2pt) */\n                closest_point = segment.start.translate(v_unit.multiply(v_unit.dot(v_ps2pt)));\n                return [dist, new Segment(pt, closest_point)];\n            }\n            else if (start_sp < 0) {                             /* point is out of scope closer to ps */\n                return pt.distanceTo(segment.start);\n            }\n            else {                                               /* point is out of scope closer to pe */\n                return pt.distanceTo(segment.end);\n            }\n        };\n\n        /**\n         * Calculate distance and shortest segment between point and arc\n         * @param pt\n         * @param arc\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static point2arc(pt, arc) {\n            let circle = new Flatten.Circle(arc.pc, arc.r);\n            let dist_and_segment = [];\n            let dist, shortest_segment;\n            [dist, shortest_segment] = Distance.point2circle(pt, circle);\n            if (shortest_segment.end.on(arc)) {\n                dist_and_segment.push(Distance.point2circle(pt, circle));\n            }\n            dist_and_segment.push( Distance.point2point(pt, arc.start) );\n            dist_and_segment.push( Distance.point2point(pt, arc.end) );\n\n            Distance.sort(dist_and_segment);\n\n            return dist_and_segment[0];\n        }\n\n        /**\n         * Calculate distance and shortest segment between segment and line\n         * @param seg\n         * @param line\n         * @returns {Number | Segment}\n         */\n        static segment2line(seg, line) {\n            let ip = seg.intersect(line);\n            if (ip.length > 0) {\n                return [0, new Segment(ip[0],ip[0])];   // distance = 0, closest point is the first point\n            }\n            let dist_and_segment = [];\n            dist_and_segment.push(Distance.point2line(seg.start, line));\n            dist_and_segment.push(Distance.point2line(seg.end, line));\n\n            Distance.sort( dist_and_segment );\n            return dist_and_segment[0];\n\n        }\n\n        /**\n         * Calculate distance and shortest segment between two segments\n         * @param seg1\n         * @param seg2\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static segment2segment(seg1, seg2) {\n            let ip = Segment.intersectSegment2Segment(seg1, seg2);\n            if (ip.length > 0) {\n                return [0, new Segment(ip[0],ip[0])];   // distance = 0, closest point is the first point\n            }\n\n            // Seg1 and seg2 not intersected\n            let dist_and_segment = [];\n\n            dist_and_segment.push(Distance.point2segment(seg2.start, seg1));\n            dist_and_segment.push(Distance.point2segment(seg2.end, seg1));\n            dist_and_segment.push(Distance.point2segment(seg1.start, seg2));\n            dist_and_segment.push(Distance.point2segment(seg1.end, seg2));\n\n            Distance.sort( dist_and_segment );\n            return dist_and_segment[0];\n        }\n\n        /**\n         * Calculate distance and shortest segment between segment and circle\n         * @param seg\n         * @param circle\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static segment2circle(seg, circle) {\n            /* Case 1 Segment and circle intersected. Return the first point and zero distance */\n            let ip = seg.intersect(circle);\n            if (ip.length > 0) {\n                return [0, new Segment(ip[0], ip[0])];\n            }\n\n            // No intersection between segment and circle\n\n            /* Case 2. Distance to projection of center point to line bigger than radius\n             * And projection point belong to segment\n              * Then measure again distance from projection to circle and return it */\n            let line = new Flatten.Line(seg.ps, seg.pe);\n            let [dist, shortest_segment] = Distance.point2line(circle.center, line);\n            if (Flatten.Utils.GE(dist, circle.r) && shortest_segment.end.on(seg)) {\n                return Distance.point2circle(shortest_segment.end, circle);\n            }\n            /* Case 3. Otherwise closest point is one of the end points of the segment */\n            else {\n                let [dist_from_start, shortest_segment_from_start] = Distance.point2circle(seg.start, circle);\n                let [dist_from_end, shortest_segment_from_end] = Distance.point2circle(seg.end, circle);\n                return Flatten.Utils.LT(dist_from_start, dist_from_end) ?\n                    [dist_from_start, shortest_segment_from_start] :\n                    [dist_from_end, shortest_segment_from_end];\n            }\n        }\n\n        /**\n         * Calculate distance and shortest segment between segment and arc\n         * @param seg\n         * @param arc\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static segment2arc(seg, arc) {\n            /* Case 1 Segment and arc intersected. Return the first point and zero distance */\n            let ip = seg.intersect(arc);\n            if (ip.length > 0) {\n                return [0, new Segment(ip[0], ip[0])];\n            }\n\n            // No intersection between segment and arc\n            let line = new Flatten.Line(seg.ps, seg.pe);\n            let circle = new Flatten.Circle(arc.pc, arc.r);\n\n            /* Case 2. Distance to projection of center point to line bigger than radius AND\n             * projection point belongs to segment AND\n               * distance from projection point to circle belongs to arc  =>\n               * return this distance from projection to circle */\n            let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\n            if (Flatten.Utils.GE(dist_from_center, circle.r) && shortest_segment_from_center.end.on(seg)) {\n                let [dist_from_projection, shortest_segment_from_projection] =\n                    Distance.point2circle(shortest_segment_from_center.end, circle);\n                if (shortest_segment_from_projection.end.on(arc)) {\n                    return [dist_from_projection, shortest_segment_from_projection];\n                }\n            }\n            /* Case 3. Otherwise closest point is one of the end points of the segment */\n            let dist_and_segment = [];\n            dist_and_segment.push(Distance.point2arc(seg.start, arc));\n            dist_and_segment.push(Distance.point2arc(seg.end, arc));\n\n            let dist_tmp, segment_tmp;\n            [dist_tmp, segment_tmp] = Distance.point2segment(arc.start, seg);\n            dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\n\n            [dist_tmp, segment_tmp] = Distance.point2segment(arc.end, seg);\n            dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\n\n            Distance.sort(dist_and_segment);\n            return dist_and_segment[0];\n        }\n\n        /**\n         * Calculate distance and shortest segment between two circles\n         * @param circle1\n         * @param circle2\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static circle2circle(circle1, circle2) {\n            let ip = circle1.intersect(circle2);\n            if (ip.length > 0) {\n                return [0, new Segment(ip[0], ip[0])];\n            }\n\n            // Case 1. Concentric circles. Convert to arcs and take distance between two arc starts\n            if (circle1.center.equalTo(circle2.center)) {\n                let arc1 = circle1.toArc();\n                let arc2 = circle2.toArc();\n                return Distance.point2point(arc1.start, arc2.start);\n            }\n            else {\n                // Case 2. Not concentric circles\n                let line = new Line(circle1.center, circle2.center);\n                let ip1 = line.intersect(circle1);\n                let ip2 = line.intersect(circle2);\n\n                let dist_and_segment = [];\n\n                dist_and_segment.push(Distance.point2point(ip1[0], ip2[0]));\n                dist_and_segment.push(Distance.point2point(ip1[0], ip2[1]));\n                dist_and_segment.push(Distance.point2point(ip1[1], ip2[0]));\n                dist_and_segment.push(Distance.point2point(ip1[1], ip2[1]));\n\n                Distance.sort(dist_and_segment);\n                return dist_and_segment[0];\n            }\n        }\n\n        /**\n         * Calculate distance and shortest segment between two circles\n         * @param circle\n         * @param line\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static circle2line(circle, line) {\n            let ip = circle.intersect(line);\n            if (ip.length > 0) {\n                return [0, new Segment(ip[0], ip[0])];\n            }\n\n            let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\n            let [dist, shortest_segment] = Distance.point2circle(shortest_segment_from_center.end, circle);\n            shortest_segment = shortest_segment.reverse();\n            return [dist, shortest_segment];\n        }\n\n        /**\n         * Calculate distance and shortest segment between arc and line\n         * @param arc\n         * @param line\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static arc2line(arc, line) {\n            /* Case 1 Line and arc intersected. Return the first point and zero distance */\n            let ip = line.intersect(arc);\n            if (ip.length > 0) {\n                return [0, new Segment(ip[0], ip[0])];\n            }\n\n            let circle = new Flatten.Circle(arc.center, arc.r);\n\n            /* Case 2. Distance to projection of center point to line bigger than radius AND\n             * projection point belongs to segment AND\n               * distance from projection point to circle belongs to arc  =>\n               * return this distance from projection to circle */\n            let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\n            if (Flatten.Utils.GE(dist_from_center, circle.r)) {\n                let [dist_from_projection, shortest_segment_from_projection] =\n                    Distance.point2circle(shortest_segment_from_center.end, circle);\n                if (shortest_segment_from_projection.end.on(arc)) {\n                    return [dist_from_projection, shortest_segment_from_projection];\n                }\n            }\n            else {\n                let dist_and_segment = [];\n                dist_and_segment.push( Distance.point2line(arc.start, line) );\n                dist_and_segment.push( Distance.point2line(arc.end, line) );\n\n                Distance.sort(dist_and_segment);\n                return dist_and_segment[0];\n            }\n        }\n\n        /**\n         * Calculate distance and shortest segment between arc and circle\n         * @param arc\n         * @param circle2\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static arc2circle(arc, circle2) {\n            let ip = arc.intersect(circle2);\n            if (ip.length > 0) {\n                return [0, new Segment(ip[0], ip[0])];\n            }\n\n            let circle1 = new Flatten.Circle(arc.center, arc.r);\n\n            let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\n            if (shortest_segment.start.on(arc)) {\n                return [dist, shortest_segment];\n            }\n            else {\n                let dist_and_segment = [];\n\n                dist_and_segment.push(Distance.point2circle(arc.start, circle2));\n                dist_and_segment.push(Distance.point2circle(arc.end, circle2));\n\n                Distance.sort(dist_and_segment);\n\n                return dist_and_segment[0];\n            }\n        }\n\n        /**\n         * Calculate distance and shortest segment between two arcs\n         * @param arc1\n         * @param arc2\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static arc2arc(arc1, arc2) {\n            let ip = arc1.intersect(arc2);\n            if (ip.length > 0) {\n                return [0, new Segment(ip[0], ip[0])];\n            }\n\n            let circle1 = new Flatten.Circle(arc1.center, arc1.r);\n            let circle2 = new Flatten.Circle(arc2.center, arc2.r);\n\n            let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\n            if (shortest_segment.start.on(arc1) && shortest_segment.end.on(arc2)) {\n                return [dist, shortest_segment];\n            }\n            else {\n                let dist_and_segment = [];\n\n                let dist_tmp, segment_tmp;\n\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc1.start, arc2);\n                if (segment_tmp.end.on(arc2)) {\n                    dist_and_segment.push([dist_tmp, segment_tmp]);\n                }\n\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc1.end, arc2);\n                if (segment_tmp.end.on(arc2)) {\n                    dist_and_segment.push([dist_tmp, segment_tmp]);\n                }\n\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc2.start, arc1);\n                if (segment_tmp.end.on(arc1)) {\n                    dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\n                }\n\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc2.end, arc1);\n                if (segment_tmp.end.on(arc1)) {\n                    dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\n                }\n\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.start);\n                dist_and_segment.push([dist_tmp, segment_tmp]);\n\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.end);\n                dist_and_segment.push([dist_tmp, segment_tmp]);\n\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.start);\n                dist_and_segment.push([dist_tmp, segment_tmp]);\n\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.end);\n                dist_and_segment.push([dist_tmp, segment_tmp]);\n\n                Distance.sort(dist_and_segment);\n\n                return dist_and_segment[0];\n            }\n        }\n\n        /**\n         * Calculate distance and shortest segment between point and polygon\n         * @param point\n         * @param polygon\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static point2polygon(point, polygon) {\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\n            for (let edge of polygon.edges) {\n                let [dist, shortest_segment] = (edge.shape instanceof Segment) ?\n                    Distance.point2segment(point, edge.shape) : Distance.point2arc(point, edge.shape);\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\n                    min_dist_and_segment = [dist, shortest_segment];\n                }\n            }\n            return min_dist_and_segment;\n        }\n\n        static shape2polygon(shape, polygon) {\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\n            for (let edge of polygon.edges) {\n                let [dist, shortest_segment] = shape.distanceTo(edge.shape);\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\n                    min_dist_and_segment = [dist, shortest_segment];\n                }\n            }\n            return min_dist_and_segment;\n        }\n\n/*\n        static arc2polygon(arc, polygon) {\n            let ip = arc.intersect(polygon);\n            if (ip.length > 0) {\n                return [0, new Segment(ip[0], ip[0])];\n            }\n\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\n            for (let edge of polygon.edges) {\n                let [dist, shortest_segment] = arc.distanceTo(edge.shape);\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\n                    min_dist_and_segment = [dist, shortest_segment];\n                }\n            }\n            return min_dist_and_segment;\n        }\n\n        static line2polygon(line, polygon) {\n            let ip = line.intersect(polygon);\n            if (ip.length > 0) {\n                return [0, new Segment(ip[0], ip[0])];\n            }\n\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\n            for (let edge of polygon.edges) {\n                let [dist, shortest_segment] = line.distanceTo(edge.shape);\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\n                    min_dist_and_segment = [dist, shortest_segment];\n                }\n            }\n            return min_dist_and_segment;\n        }\n\n        static circle2polygon(circle, polygon) {\n            let ip = circle.intersect(polygon);\n            if (ip.length > 0) {\n                return [0, new Segment(ip[0], ip[0])];\n            }\n\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\n            for (let edge of polygon.edges) {\n                let [dist, shortest_segment] = circle.distanceTo(edge.shape);\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\n                    min_dist_and_segment = [dist, shortest_segment];\n                }\n            }\n            return min_dist_and_segment;\n        }\n*/\n\n        /**\n         * Calculate distance and shortest segment between two polygons\n         * @param polygon1\n         * @param polygon2\n         * @returns {Number | Segment} - distance and shortest segment\n         */\n        static polygon2polygon(polygon1, polygon2) {\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\n            for (let edge1 of polygon1.edges) {\n                for (let edge2 of polygon2.edges) {\n                    let [dist, shortest_segment] = edge1.shape.distanceTo(edge2.shape);\n                    if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\n                        min_dist_and_segment = [dist, shortest_segment];\n                    }\n                }\n            }\n            return min_dist_and_segment;\n        }\n\n        /**\n         * Returns [mindist, maxdist] array of squared minimal and maximal distance between boxes\n         * Minimal distance by x is\n         *    (box2.xmin - box1.xmax), if box1 is left to box2\n         *    (box1.xmin - box2.xmax), if box2 is left to box1\n         *    0,                       if box1 and box2 are intersected by x\n         * Minimal distance by y is defined in the same way\n         *\n         * Maximal distance is estimated as a sum of squared dimensions of the merged box\n         *\n         * @param box1\n         * @param box2\n         * @returns {Number | Number} - minimal and maximal distance\n         */\n        static box2box_minmax(box1, box2) {\n            let mindist_x = Math.max( Math.max(box1.xmin - box2.xmax, 0), Math.max(box2.xmin - box1.xmax, 0) );\n            let mindist_y = Math.max( Math.max(box1.ymin - box2.ymax, 0), Math.max(box2.ymin - box1.ymax, 0) );\n            let mindist = mindist_x*mindist_x + mindist_y*mindist_y;\n\n            let box = box1.merge(box2);\n            let dx = box.xmax - box.xmin;\n            let dy = box.ymax - box.ymin;\n            let maxdist = dx*dx + dy*dy;\n\n            return [mindist, maxdist];\n        }\n\n        static minmax_tree_process_level(shape, level, min_stop, tree) {\n            // Calculate minmax distance to each shape in current level\n            // Insert result into the interval tree for further processing\n            // update min_stop with maxdist, it will be the new stop distance\n            let mindist, maxdist;\n            for (let node of level) {\n\n                // [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\n                // if (Flatten.Utils.GT(mindist, min_stop))\n                //     continue;\n\n                // Estimate min-max dist to the shape stored in the node.item, using node.item.key which is shape's box\n                [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.item.key);\n                if (node.item.value instanceof Flatten.Edge) {\n                    tree.insert([mindist, maxdist], node.item.value.shape);\n                }\n                else {\n                    tree.insert([mindist, maxdist], node.item.value);\n                }\n                if (Flatten.Utils.LT(maxdist, min_stop)) {\n                    min_stop = maxdist;                       // this will be the new distance estimation\n                }\n            }\n\n            if (level.length === 0)\n                return min_stop;\n\n            // Calculate new level from left and right children of the current\n            let new_level_left = level.map(node => node.left.isNil() ? undefined : node.left ).filter(node => node !== undefined);\n            let new_level_right = level.map(node => node.right.isNil() ? undefined : node.right).filter(node => node !== undefined);\n            // Merge left and right subtrees and leave only relevant subtrees\n            let new_level = [...new_level_left, ...new_level_right].filter( node => {\n                // Node subtree quick reject, node.max is a subtree box\n                let [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\n                return (Flatten.Utils.LE(mindist, min_stop));\n            });\n\n            min_stop = Distance.minmax_tree_process_level(shape, new_level, min_stop, tree);\n            return min_stop;\n        }\n\n        /**\n         * Calculates sorted tree of [mindist, maxdist] intervals between query shape\n         * and shapes of the planar set.\n         * @param shape\n         * @param set\n         */\n        static minmax_tree(shape, set, min_stop) {\n            let tree = new IntervalTree();\n            let level = [set.index.root];\n            let squared_min_stop = min_stop < Number.POSITIVE_INFINITY ? min_stop*min_stop : Number.POSITIVE_INFINITY;\n            squared_min_stop = Distance.minmax_tree_process_level(shape, level, squared_min_stop, tree);\n            return tree;\n        }\n\n        static minmax_tree_calc_distance(shape, node, min_dist_and_segment) {\n            let min_dist_and_segment_new, stop;\n            if (node != null && !node.isNil()) {\n                [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.left, min_dist_and_segment);\n\n                if (stop) {\n                    return [min_dist_and_segment_new, stop];\n                }\n\n                if (Flatten.Utils.LT(min_dist_and_segment_new[0], Math.sqrt(node.item.key.low))) {\n                    return [min_dist_and_segment_new, true];   // stop condition\n                }\n\n                let [dist, shortest_segment] = Distance.distance(shape, node.item.value);\n                // console.log(dist)\n                if (Flatten.Utils.LT(dist, min_dist_and_segment_new[0])) {\n                    min_dist_and_segment_new = [dist, shortest_segment];\n                }\n\n                [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.right, min_dist_and_segment_new);\n\n                return [min_dist_and_segment_new, stop];\n            }\n\n            return [min_dist_and_segment, false];\n        }\n\n        /**\n         * Calculates distance between shape and Planar Set of shapes\n         * @param shape\n         * @param {PlanarSet} set\n         * @param {Number} min_stop\n         * @returns {*}\n         */\n        static shape2planarSet(shape, set, min_stop = Number.POSITIVE_INFINITY) {\n            let min_dist_and_segment = [min_stop, new Flatten.Segment()];\n            let stop = false;\n            if (set instanceof Flatten.PlanarSet) {\n                let tree = Distance.minmax_tree(shape, set, min_stop);\n                [min_dist_and_segment, stop] = Distance.minmax_tree_calc_distance(shape, tree.root, min_dist_and_segment);\n            }\n            return min_dist_and_segment;\n        }\n\n        static sort(dist_and_segment) {\n            dist_and_segment.sort((d1, d2) => {\n                if (Flatten.Utils.LT(d1[0], d2[0])) {\n                    return -1;\n                }\n                if (Flatten.Utils.GT(d1[0], d2[0])) {\n                    return 1;\n                }\n                return 0;\n            });\n        }\n\n        static distance(shape1, shape2) {\n            return shape1.distanceTo(shape2);\n        }\n    }\n};","/**\n * Created by Alex Bol on 3/15/2017.\n */\n\n\"use strict\";\n\nmodule.exports = function(Flatten) {\n    let {Edge, Face, PlanarSet, Box} = Flatten;\n    let {ray_shoot} = Flatten;\n    /**\n     * Class representing a polygon.<br/>\n     * Polygon in FlattenJS is a multipolygon comprised from a set of [faces]{@link Flatten.Face}. <br/>\n     * Face, in turn, is a closed loop of [edges]{@link Flatten.Edge}, where edge may be segment or circular arc<br/>\n     * @type {Polygon}\n     */\n    Flatten.Polygon = class Polygon {\n        /**\n         * Constructor creates new instance of polygon.<br/>\n         * New polygon is empty. Add face to the polygon using method <br/>\n         * <code>\n         *     polygon.addFace(Points[]|Segments[]|Arcs[])\n         * </code>\n         */\n        constructor() {\n            /**\n             * Container of faces (closed loops), may be empty\n             * @type {PlanarSet}\n             */\n            this.faces = new PlanarSet();\n            /**\n             * Container of edges\n             * @type {PlanarSet}\n             */\n            this.edges = new PlanarSet();\n        }\n\n        /**\n         * (Getter) Returns bounding box of the polygon\n         * @returns {Box}\n         */\n        get box() {\n            return [...this.faces].reduce( (acc, face) => acc.merge(face.box), new Box() );\n        }\n\n        /**\n         * (Getter) Returns array of vertices\n         * @returns {Array}\n         */\n        get vertices() {\n            return [...this.edges].map( edge => edge.start);\n        }\n\n        /**\n         * Add new face to polygon. Returns added face\n         * @param {Points[]|Segments[]|Arcs[]} args - list of points or list of shapes (segments and arcs)\n         * which comprise a closed loop\n         * @returns {Face}\n         */\n        addFace(...args) {\n            let face = new Face(this, ...args);\n            this.faces.add(face);\n            return face;\n        }\n\n        /**\n         * Delete existing face from polygon\n         * @param {Face} face Face to be deleted\n         * @returns {boolean}\n         */\n        deleteFace(face) {\n            for (let edge of face) {\n                let deleted = this.edges.delete(edge);\n            }\n            let deleted = this.faces.delete(face);\n            return deleted;\n        }\n\n        /**\n         * Delete chain of edges from the face.\n         * @param {Face} face Face to remove chain\n         * @param {Edge} edgeFrom Start of the chain of edges to be removed\n         * @param {Edge} edgeTo End of the chain of edges to be removed\n         */\n        removeChain(face, edgeFrom, edgeTo) {\n            // Special case: all edges removed\n            if (edgeTo.next === edgeFrom) {\n                this.deleteFace(face);\n                return;\n            }\n            for (let edge = edgeFrom; edge !== edgeTo.next; edge = edge.next ) {\n                face.remove(this.edges, edge);\n                // this.edges.delete(edge);      // delete from PlanarSet of edges and update index\n                if (face.isEmpty()) {\n                    this.deleteFace(face);    // delete from PlanarSet of faces and update index\n                    break;\n                }\n            }\n        }\n\n        /**\n         * Add point as a new vertex and split edge. Point supposed to belong to an edge.\n         * When edge is split, new edge created from the start of the edge to the new vertex\n         * and inserted before current edge.\n         * Current edge is trimmed and updated. Method returns new edge added.\n         * @param {Edge} edge Edge to be split with new vertex and then trimmed from start\n         * @param {Point} pt Point to be added as a new vertex\n         * @returns {Edge}\n         */\n        addVertex(pt, edge) {\n            let shapes = edge.shape.split(pt);\n            if (shapes.length < 2) return;\n            let newEdge = new Flatten.Edge(shapes[0]);\n            let edgeBefore = edge.prev;\n\n            /* Insert first split edge into linked list after edgeBefore */\n            edge.face.insert(this.edges, newEdge, edgeBefore);\n\n            // Remove old edge from edges container and 2d index\n            this.edges.delete(edge);\n\n            // Update edge shape with second split edge keeping links\n            edge.shape = shapes[1];\n\n            // Add updated edge to the edges container and 2d index\n            this.edges.add(edge);\n\n            return newEdge;\n        }\n\n        reverse() {\n            for (let face of this.faces) {\n                face.reverse();\n            }\n            return this;\n        }\n\n        /**\n         * Create new copied instance of the polygon\n         * @returns {Polygon}\n         */\n        clone() {\n            let polygon = new Polygon();\n            for (let face of this.faces) {\n                let shapes = [];\n                for (let edge of face) {\n                    shapes.push(edge.shape.clone());\n                }\n                polygon.addFace(shapes);\n            }\n            return polygon;\n        }\n\n        /**\n         * Returns area of the polygon. Area of an island will be added, area of a hole will be subtracted\n         * @returns {number}\n         */\n        area() {\n            let signedArea = [...this.faces].reduce((acc,face) => acc + face.signedArea(), 0);\n            return Math.abs(signedArea);\n        }\n\n        /**\n         * Returns true if polygon contains point, including polygon boundary, false otherwise\n         * Point in polygon test based on ray shooting algorithm\n         * @param {Point} point - test point\n         * @returns {boolean}\n         */\n        contains(point) {\n            let rel = ray_shoot(this, point);\n            return (rel == Flatten.INSIDE || rel == Flatten.BOUNDARY) ? true : false;\n        }\n\n        /**\n         * Return distance and shortest segment between polygon and other shape as array [distance, shortest_segment]\n         * @param {Shape} shape Shape of one of the types Point, Circle, Line, Segment, Arc or Polygon\n         * @returns {Number | Segment}\n         */\n        distanceTo(shape) {\n            let {Distance} = Flatten;\n\n            if (shape instanceof Flatten.Point) {\n                let [dist, shortest_segment] = Distance.point2polygon(shape, this);\n                shortest_segment = shortest_segment.reverse();\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Circle ||\n            shape instanceof Flatten.Line ||\n            shape instanceof Flatten.Segment ||\n            shape instanceof Flatten.Arc) {\n                let [dist, shortest_segment] = Distance.shape2polygon(shape, this);\n                shortest_segment = shortest_segment.reverse();\n                return [dist, shortest_segment];\n            }\n\n            /* this method is bit faster */\n            if (shape instanceof  Flatten.Polygon) {\n                let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\n                let dist, shortest_segment;\n\n                for (let edge of this.edges) {\n                    // let [dist, shortest_segment] = Distance.shape2polygon(edge.shape, shape);\n                    let min_stop = min_dist_and_segment[0];\n                    [dist, shortest_segment] = Distance.shape2planarSet(edge.shape, shape.edges, min_stop);\n                    if (Flatten.Utils.LT(dist, min_stop)) {\n                        min_dist_and_segment = [dist, shortest_segment];\n                    }\n                }\n                return min_dist_and_segment;\n            }\n        }\n\n        /**\n         * Return true if polygon is valid for boolean operations\n         * Polygon is valid if <br/>\n         * 1. All faces are simple polygons (there are no self-intersected polygons) <br/>\n         * 2. All faces are orientable and there is no island inside island or hole inside hole - TODO <br/>\n         * 3. There is no intersections between faces (excluding touching) - TODO <br/>\n         * @returns {boolean}\n         */\n        isValid() {\n            let valid = true;\n            // 1. Polygon is invalid if at least one face is not simple\n            for (let face of this.faces) {\n                if (!face.isSimple(this.edges)) {\n                    valid = false;\n                    break;\n                }\n            }\n            // 2. TODO: check if no island inside island and no hole inside hole\n            // 3. TODO: check the there is no intersection between faces\n            return valid;\n        }\n\n        /**\n         * Returns new polygon translated by vector vec\n         * @param {Vector} vec\n         * @returns {Polygon}\n         */\n        translate(vec) {\n            let newPolygon = new Polygon();\n            for (let face of this.faces) {\n                let shapes = [];\n                for (let edge of face) {\n                    shapes.push(edge.shape.translate(vec));\n                }\n                newPolygon.addFace(shapes);\n            }\n            return newPolygon;\n        }\n\n        /**\n         * Return new polygon rotated by given angle around given point\n         * If point omitted, rotate around origin (0,0)\n         * Positive value of angle defines rotation counter clockwise, negative - clockwise\n         * @param {number} angle - rotation angle in radians\n         * @param {Point} center - rotation center, default is (0,0)\n         * @returns {Polygon} - new rotated polygon\n         */\n        rotate(angle=0, center=new Flatten.Point()) {\n            let newPolygon = new Polygon();\n            for (let face of this.faces) {\n                let shapes = [];\n                for (let edge of face) {\n                    shapes.push(edge.shape.rotate(angle, center));\n                }\n                newPolygon.addFace(shapes);\n            }\n            return newPolygon;\n        }\n\n        /**\n         * Return new polygon transformed using affine transformation matrix\n         * @param {Matrix} matrix - affine transformation matrix\n         * @returns {Polygon} - new polygon\n         */\n        transform(matrix = new Flatten.Matrix()) {\n            let newPolygon = new Polygon();\n            for (let face of this.faces) {\n                let shapes = [];\n                for (let edge of face) {\n                    shapes.push(edge.shape.transform(matrix));\n                }\n                newPolygon.addFace(shapes);\n            }\n            return newPolygon;\n        }\n\n        /**\n         * Return string to draw polygon in svg\n         * @param attrs  - json structure with attributes for svg path element,\n         * like \"stroke\", \"strokeWidth\", \"fill\", \"fillRule\"\n         * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"lightcyan\", fillRule:\"evenodd\"\n         * @returns {string}\n         */\n        svg(attrs = {}) {\n            let {stroke, strokeWidth, fill, fillRule, fillOpacity, id, className} = attrs;\n            // let restStr = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\n\n            let svgStr = `\\n<path stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"lightcyan\"}\" fill-rule=\"${fillRule || \"evenodd\"}\" fill-opacity=\"${fillOpacity || 1.0}\" ${id_str} ${class_str} d=\"`;\n            for (let face of this.faces) {\n                svgStr += face.svg();\n            }\n            svgStr += `\" >\\n</path>`;\n\n            return svgStr;\n        }\n\n        toJSON() {\n            return [...this.faces].map(face => face.toJSON());\n        }\n    }\n};","\n\"use strict\";\n\nmodule.exports = function(Flatten) {\n    let {Polygon, Point, Segment, Arc, Line, Ray} = Flatten;\n\n    Flatten.ray_shoot = function(polygon, point) {\n        let contains = undefined;\n\n        // if (!(polygon instanceof Polygon && point instanceof Point)) {\n        //     throw Flatten.Errors.ILLEGAL_PARAMETERS;\n        // }\n\n        // 1. Quick reject\n        if (polygon.box.notIntersect(point.box)) {\n            return Flatten.OUTSIDE;\n        }\n\n        let ray = new Ray(point);\n        let line = new Line(ray.pt, ray.norm);\n\n        // 2. Locate relevant edges of the polygon\n        let resp_edges = polygon.edges.search(ray.box);\n\n        if (resp_edges.length == 0) {\n            return Flatten.OUTSIDE;\n        }\n\n        // 3. Calculate intersections\n        let intersections = [];\n        for (let edge of resp_edges) {\n            for (let ip of ray.intersect(edge.shape)) {\n\n                // If intersection is equal to query point then point lays on boundary\n                if (ip.equalTo(point)) {\n                    return Flatten.BOUNDARY;\n                }\n\n                intersections.push({\n                    pt: ip,\n                    edge: edge\n                });\n            }\n        }\n\n        // 4. Sort intersection in x-ascending order\n        intersections.sort( (i1, i2) => {\n            if (Flatten.Utils.LT(i1.pt.x, i2.pt.x)) {\n                return -1;\n            }\n            if (Flatten.Utils.GT(i1.pt.x, i2.pt.x)) {\n                return 1;\n            }\n            return 0;\n        });\n\n        // 5. Count real intersections, exclude touching\n        let counter = 0;\n\n        for (let i=0; i < intersections.length; i++) {\n            let intersection = intersections[i];\n            if (intersection.pt.equalTo(intersection.edge.shape.start)) {\n                /* skip same point between same edges if already counted */\n                if (i > 0 && intersection.pt.equalTo(intersections[i-1].pt) &&\n                    intersection.edge.prev === intersections[i-1].edge) {\n                    continue;\n                }\n                let prev_edge = intersection.edge.prev;\n                let prev_tangent = prev_edge.shape.tangentInEnd();\n                let prev_point = intersection.pt.translate(prev_tangent);\n\n                let cur_tangent = intersection.edge.shape.tangentInStart();\n                let cur_point = intersection.pt.translate(cur_tangent);\n\n                let prev_on_the_left = prev_point.leftTo(line);\n                let cur_on_the_left = cur_point.leftTo(line);\n\n                if ( (prev_on_the_left && !cur_on_the_left) || (!prev_on_the_left && cur_on_the_left) ) {\n                    counter++;\n                }\n            }\n            else if (intersection.pt.equalTo(intersection.edge.shape.end)) {\n                /* skip same point between same edges if already counted */\n                if (i > 0 && intersection.pt.equalTo(intersections[i-1].pt) &&\n                    intersection.edge.next === intersections[i-1].edge) {\n                    continue;\n                }\n                let next_edge = intersection.edge.next;\n                let next_tangent = next_edge.shape.tangentInStart();\n                let next_point = intersection.pt.translate(next_tangent);\n\n                let cur_tangent = intersection.edge.shape.tangentInEnd();\n                let cur_point = intersection.pt.translate(cur_tangent);\n\n                let next_on_the_left = next_point.leftTo(line);\n                let cur_on_the_left = cur_point.leftTo(line);\n\n                if ( (next_on_the_left && !cur_on_the_left) || (!next_on_the_left && cur_on_the_left) ) {\n                    counter++;\n                }\n            }\n            else {        /* intersection point is not a coincident with a vertex */\n                if (intersection.edge.shape instanceof Segment) {\n                    counter++;\n                }\n                else {\n                    /* Check if ray does not touch the curve in the extremal (top or bottom) point */\n                    let box = intersection.edge.shape.box;\n                    if ( !(Flatten.Utils.EQ(intersection.pt.y, box.ymin) ||\n                            Flatten.Utils.EQ(intersection.pt.y, box.ymax)) ) {\n                        counter++;\n                    }\n                }\n            }\n        }\n\n        // 6. Odd or even?\n        contains = counter % 2 == 1 ? Flatten.INSIDE : Flatten.OUTSIDE;\n\n        return contains;\n    };\n};","\"use strict\";\n\nmodule.exports = function(Flatten) {\n    let {Point, Segment, Line, Circle, Arc, Box, Vector} = Flatten;\n    /**\n     * Class representing a horizontal ray, used by ray shooting algorithm\n     * @type {Ray}\n     */\n    Flatten.Ray = class Ray {\n        /**\n         * Construct ray by setting start point\n         * @param {Point} pt - start point\n         */\n        constructor(...args) {\n            this.pt = new Point();\n\n            if (args.length == 0) {\n                return;\n            }\n\n            if (args.length == 1 && args[0] instanceof Point) {\n                this.pt = args[0].clone();\n                return;\n            }\n\n            if (args.length == 2 && typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\n                this.pt = new Point(args[0], args[1]);\n                return;\n            }\n\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\n        }\n\n        /**\n         * Returns copied instance of the ray object\n         * @returns {Ray}\n         */\n        clone() {\n            return new Ray(this.pt);\n        }\n\n        /**\n         * Returns half-infinite bounding box of the ray\n         * @returns {Box} - bounding box\n         */\n        get box() {\n            return new Box(\n                this.pt.x,\n                this.pt.y,\n                Number.POSITIVE_INFINITY,\n                this.pt.y\n            )\n        }\n\n        /**\n         * Return ray start point\n         * @returns {Point} - ray start point\n         */\n        get start() {\n            return this.pt;\n        }\n\n        /**\n         * Return ray normal vector (0,1) - horizontal ray\n         * @returns {Vector} - ray normal vector\n         */\n        get norm() {\n            return new Vector(0,1);\n        }\n\n        /**\n         * Returns array of intersection points between ray and segment or arc\n         * @param {Segment|Arc} - Shape to intersect with ray\n         * @returns {Array} array of intersection points\n         */\n        intersect(shape) {\n            if (shape instanceof Segment) {\n                return this.intersectRay2Segment(this, shape);\n            }\n\n            if (shape instanceof Arc) {\n                return this.intersectRay2Arc(this, shape);\n            }\n        }\n\n        intersectRay2Segment(ray, segment) {\n            let ip = [];\n\n            if (ray.box.notIntersect(segment.box)) {\n                return ip;\n            }\n\n            let line = new Line(ray.start, ray.norm);\n            let ip_tmp = line.intersect(segment);\n\n            for (let pt of ip_tmp) {\n                if (Flatten.Utils.GE(pt.x, ray.start.x)) {\n                    ip.push(pt);\n                }\n            }\n\n            /* If there were two intersection points between line and ray,\n            and now there is exactly one left, it means ray starts between these points\n            and there is another intersection point - start of the ray */\n            if (ip_tmp.length == 2 && ip.length == 1 && ray.start.on(line)) {\n                ip.push(ray.start);\n            }\n\n            return ip;\n        }\n\n        intersectRay2Arc(ray, arc) {\n            let ip = [];\n\n            if (ray.box.notIntersect(arc.box)) {\n                return ip;\n            }\n\n            let line = new Line(ray.start, ray.norm);\n            let ip_tmp = line.intersect(arc);\n\n            for (let pt of ip_tmp) {\n                if (Flatten.Utils.GE(pt.x, ray.start.x)) {\n                    ip.push(pt);\n                }\n            }\n            return ip;\n        }\n    };\n\n    Flatten.ray = (...args) => new Flatten.Ray(...args);\n};","/**\n * Created by Alex Bol on 3/17/2017.\n */\n\n\"use strict\";\n\nmodule.exports = function (Flatten) {\n    let {Point, Segment, Arc, Box, Edge} = Flatten;\n    /**\n     * Class representing a face (closed loop) in a [polygon]{@link Flatten.Polygon} object.\n     * Face is a circular bidirectional linked list of [edges]{@link Flatten.Edge}.\n     * Face object cannot be instantiated with a constructor.\n     * Instead, use [polygon.addFace()]{@link Flatten.Polygon#addFace} method.\n     * <br/>\n     * Note, that face only set entry point to the linked list of edges but does not contain edges by itself.\n     * Container of edges is a property of the polygon object. <br/>\n     *\n     * @example\n     * // Face implements \"next\" iterator which enables to iterate edges in for loop:\n     * for (let edge of face) {\n     *      console.log(edge.shape.length)     // do something\n     * }\n     *\n     * // Instead, it is possible to iterate edges as linked list, starting from face.first:\n     * let edge = face.first;\n     * do {\n     *   console.log(edge.shape.length);   // do something\n     *   edge = edge.next;\n     * } while (edge != face.first)\n     */\n    Flatten.Face = class Face {\n        constructor(polygon, ...args) {\n            /**\n             * Reference to the first edge in face\n             */\n            this.first;\n            /**\n             * Reference to the last edge in face\n             */\n            this.last;\n\n            this._box = undefined;  // new Box();\n            this._orientation = undefined;\n\n            if (args.length == 0) {\n                return;\n            }\n\n            /* If passed an array it supposed to be:\n             1) array of shapes that performs close loop or\n             2) array of points that performs set of vertices\n             */\n            if (args.length == 1) {\n                if (args[0] instanceof Array) {\n                    // let argsArray = args[0];\n                    let shapes = args[0];  // argsArray[0];\n                    if (shapes.length == 0)\n                        return;\n\n                    if (shapes.every((shape) => {\n                            return shape instanceof Point\n                        })) {\n                        let segments = Face.points2segments(shapes);\n                        this.shapes2face(polygon.edges, segments);\n                    }\n                    else if (shapes.every((shape) => {\n                            return (shape instanceof Segment || shape instanceof Arc)\n                        })) {\n                        this.shapes2face(polygon.edges, shapes);\n                    }\n                    // this is from JSON.parse object\n                    else if (shapes.every((shape) => {\n                            return (shape.name === \"segment\" || shape.name === \"arc\")\n                        })) {\n                        let flattenShapes = [];\n                        for (let shape of shapes) {\n                            let flattenShape;\n                            if (shape.name === \"segment\") {\n                                flattenShape = new Segment(shape.ps.x, shape.ps.y, shape.pe.x, shape.pe.y);\n                            }\n                            else {\n                                flattenShape = new Arc(new Point(shape.pc.x, shape.pc.y),\n                                    shape.r, shape.startAngle, shape.endAngle, shape.counterClockwise);\n                            }\n                            flattenShapes.push(flattenShape);\n                        }\n                        this.shapes2face(polygon.edges, flattenShapes);\n                    }\n                }\n                /* Create new face and copy edges into polygon.edges set */\n                else if (args[0] instanceof Face) {\n                    let face = args[0];\n                    this.first = face.first;\n                    this.last = face.last;\n                    for (let edge of face) {\n                        polygon.edges.add(edge);\n                    }\n                }\n            }\n            /* If passed two edges, consider them as start and end of the face loop */\n            /* THIS METHOD WILL BE USED BY BOOLEAN OPERATIONS */\n            /* Assume that edges already copied to polygon.edges set in the clip algorithm !!! */\n            if (args.length == 2 && args[0] instanceof Edge && args[1] instanceof Edge) {\n                this.first = args[0];                          // first edge in face or undefined\n                this.last = args[1];                           // last edge in face or undefined\n                this.last.next = this.first;\n                this.first.prev = this.last;\n\n                // set arc length\n                this.setArcLength();\n                /*\n                 let edge = this.first;\n                 edge.arc_length = 0;\n                 edge = edge.next;\n                 while (edge !== this.first) {\n                 edge.arc_length = edge.prev.arc_length + edge.prev.length;\n                 edge = edge.next;\n                 }\n                 */\n\n                // this.box = this.getBox();\n                // this.orientation = this.getOrientation();      // face direction cw or ccw\n            }\n        }\n\n        [Symbol.iterator]() {\n            let edge = undefined;\n            return {\n                next: () => {\n                    let value = edge ? edge : this.first;\n                    let done = this.first ? (edge ? edge === this.first : false) : true;\n                    edge = value ? value.next : undefined;\n                    return {value: value, done: done};\n                }\n            };\n        };\n\n        /**\n         * Return array of edges from first to last\n         * @returns {Array}\n         */\n        get edges() {\n            let face_edges = [];\n            for (let edge of this) {\n                face_edges.push(edge);\n            }\n            return face_edges;\n        }\n\n        /**\n         * Return number of edges in the face\n         * @returns {number}\n         */\n        get size() {\n            let counter = 0;\n            for (let edge of this) {\n                counter++;\n            }\n            return counter;\n        }\n\n        /**\n         * Return bounding box of the face\n         * @returns {Box}\n         */\n        get box() {\n            if (this._box === undefined) {\n                let box = new Flatten.Box();\n                for (let edge of this) {\n                    box = box.merge(edge.box);\n                }\n                this._box = box;\n            }\n            return this._box;\n        }\n\n        static points2segments(points) {\n            let segments = [];\n            for (let i = 0; i < points.length; i++) {\n                segments.push(new Segment(points[i], points[(i + 1) % points.length]));\n            }\n            return segments;\n        }\n\n        shapes2face(edges, shapes) {\n            for (let shape of shapes) {\n                let edge = new Edge(shape);\n                this.append(edges, edge);\n                // this.box = this.box.merge(shape.box);\n                // edges.add(edge);\n            }\n            // this.orientation = this.getOrientation();              // face direction cw or ccw\n        }\n\n        /**\n         * Returns true if face is empty, false otherwise\n         * @returns {boolean}\n         */\n        isEmpty() {\n            return (this.first === undefined && this.last === undefined)\n        }\n\n        /**\n         * Append given edge after the last edge (and before the first edge). <br/>\n         * This method mutates current object and does not return any value\n         * @param {PlanarSet} edges - Container of edges\n         * @param {Edge} edge - Edge to be appended to the linked list\n         */\n        append(edges, edge) {\n            if (this.first === undefined) {\n                edge.prev = edge;\n                edge.next = edge;\n                this.first = edge;\n                this.last = edge;\n                edge.arc_length = 0;\n            }\n            else {\n                // append to end\n                edge.prev = this.last;\n                this.last.next = edge;\n\n                // update edge to be last\n                this.last = edge;\n\n                // restore circular links\n                this.last.next = this.first;\n                this.first.prev = this.last;\n\n                // set arc length\n                edge.arc_length = edge.prev.arc_length + edge.prev.length;\n            }\n            edge.face = this;\n\n            edges.add(edge);      // Add new edges into edges container\n        }\n\n        /**\n         * Insert edge newEdge into the linked list after the edge edgeBefore <br/>\n         * This method mutates current object and does not return any value\n         * @param {PlanarSet} edges - Container of edges\n         * @param {Edge} newEdge - Edge to be inserted into linked list\n         * @param {Edge} edgeBefore - Edge to insert newEdge after it\n         */\n        insert(edges, newEdge, edgeBefore) {\n            if (this.first === undefined) {\n                newEdge.prev = newEdge;\n                newEdge.next = newEdge;\n                this.first = newEdge;\n                this.last = newEdge;\n            }\n            else {\n                /* set links to new edge */\n                let edgeAfter = edgeBefore.next;\n                edgeBefore.next = newEdge;\n                edgeAfter.prev = newEdge;\n\n                /* set links from new edge */\n                newEdge.prev = edgeBefore;\n                newEdge.next = edgeAfter;\n\n                /* extend chain if new edge added after last edge */\n                if (this.last === edgeBefore)\n                    this.first = newEdge;\n            }\n            newEdge.face = this;\n\n            // set arc length\n            if (newEdge.prev === this.last) {\n                newEdge.arc_length = 0;\n            }\n            else {\n                newEdge.arc_length = newEdge.prev.arc_length + newEdge.prev.length;\n            }\n\n            edges.add(newEdge);      // Add new edges into edges container\n        }\n\n        /**\n         * Remove the given edge from the linked list of the face <br/>\n         * This method mutates current object and does not return any value\n         * @param {PlanarSet} edges - Container of edges\n         * @param {Edge} edge - Edge to be removed\n         */\n        remove(edges, edge) {\n            // special case if last edge removed\n            if (edge === this.first && edge === this.last) {\n                this.first = undefined;\n                this.last = undefined;\n            }\n            else {\n                // update linked list\n                edge.prev.next = edge.next;\n                edge.next.prev = edge.prev;\n                // update first if need\n                if (edge === this.first) {\n                    this.first = edge.next;\n                }\n                // update last if need\n                if (edge === this.last) {\n                    this.last = edge.prev;\n                }\n            }\n            edges.delete(edge);      // delete from PlanarSet of edges and update index\n        }\n\n        /**\n         * Reverse orientation of the face: first edge become last and vice a verse,\n         * all edges starts and ends swapped, direction of arcs inverted.\n         */\n        reverse() {\n            // collect edges in revert order with reverted shapes\n            let edges = [];\n            let edge_tmp = this.last;\n            do {\n                // reverse shape\n                edge_tmp.shape = edge_tmp.shape.reverse();\n                edges.push(edge_tmp);\n                edge_tmp = edge_tmp.prev;\n            } while (edge_tmp !== this.last);\n\n            // restore linked list\n            this.first = undefined;\n            this.last = undefined;\n            for (let edge of edges) {\n                if (this.first === undefined) {\n                    edge.prev = edge;\n                    edge.next = edge;\n                    this.first = edge;\n                    this.last = edge;\n                    edge.arc_length = 0;\n                }\n                else {\n                    // append to end\n                    edge.prev = this.last;\n                    this.last.next = edge;\n\n                    // update edge to be last\n                    this.last = edge;\n\n                    // restore circular links\n                    this.last.next = this.first;\n                    this.first.prev = this.last;\n\n                    // set arc length\n                    edge.arc_length = edge.prev.arc_length + edge.prev.length;\n                }\n            }\n\n            // Recalculate orientation, if set\n            if (this._orientation !== undefined) {\n                this._orientation = undefined;\n                this._orientation = this.orientation();\n            }\n        }\n\n\n        /**\n         * Set arc_length property for each of the edges in the face.\n         * Arc_length of the edge it the arc length from the first edge of the face\n         */\n        setArcLength() {\n            for (let edge of this) {\n                if (edge === this.first) {\n                    edge.arc_length = 0.0;\n                }\n                else {\n                    edge.arc_length = edge.prev.arc_length + edge.prev.length;\n                }\n                edge.face = this;\n            }\n        }\n\n        /**\n         * Returns the absolute value of the area of the face\n         * @returns {number}\n         */\n        area() {\n            return Math.abs(this.signedArea());\n        }\n\n        /**\n         * Returns signed area of the simple face.\n         * Face is simple if it has no self intersections that change its orientation.\n         * Then the area will be positive if the orientation of the face is clockwise,\n         * and negative if orientation is counterclockwise.\n         * It may be zero if polygon is degenerated.\n         * @returns {number}\n         */\n        signedArea() {\n            let sArea = 0;\n            for (let edge of this) {\n                sArea += edge.shape.definiteIntegral(this.box.ymin);\n            }\n            return sArea;\n        }\n\n        /**\n         * Return face orientation: one of Flatten.ORIENTATION.CCW, Flatten.ORIENTATION.CW, Flatten.ORIENTATION.NOT_ORIENTABLE <br/>\n         * According to Green theorem the area of a closed curve may be calculated as double integral,\n         * and the sign of the integral will be defined by the direction of the curve.\n         * When the integral (\"signed area\") will be negative, direction is counter clockwise,\n         * when positive - clockwise and when it is zero, polygon is not orientable.\n         * See {@link https://mathinsight.org/greens_theorem_find_area}\n         * @returns {number}\n         */\n        orientation() {\n            if (this._orientation === undefined) {\n                let area = this.signedArea();\n                if (Flatten.Utils.EQ_0(area)) {\n                    this._orientation = Flatten.ORIENTATION.NOT_ORIENTABLE;\n                }\n                else if (Flatten.Utils.LT(area, 0)) {\n                    this._orientation = Flatten.ORIENTATION.CCW;\n                }\n                else {\n                    this._orientation = Flatten.ORIENTATION.CW;\n                }\n            }\n            return this._orientation;\n        }\n\n        /**\n         * Check relation between face and other polygon\n         * on strong assumption that they are NOT INTERSECTED <br/>\n         * Then there are 4 options: <br/>\n         * face disjoint to polygon - Flatten.OUTSIDE <br/>\n         * face inside polygon - Flatten.INSIDE <br/>\n         * face contains polygon - Flatten.CONTAIN <br/>\n         * face interlaced with polygon: inside some face and contains other face - Flatten.INTERLACE <br/>\n         * @param {Polygon} polygon - Polygon to check relation\n         */\n        getRelation(polygon) {\n            this.first.bv = this.first.bvStart = this.first.bvEnd = undefined;\n            let bvThisInOther = this.first.setInclusion(polygon);\n            let resp = polygon.faces.search(this.box);\n            if (resp.length === 0) {\n                return bvThisInOther;        // OUTSIDE or INSIDE\n            }\n            else {                           // possible INTERLACE\n                let polyTmp = new Flatten.Polygon();\n                polyTmp.addFace(this);\n\n                let numInsideThis = 0;\n                for (let face of resp) {\n                    face.first.bv = face.first.bvStart = face.first.bvEnd = undefined;\n                    let bvOtherInThis = face.first.setInclusion(polyTmp);\n                    if (bvOtherInThis === Flatten.INSIDE) {\n                        numInsideThis++;\n                    }\n                }\n                if (bvThisInOther === Flatten.OUTSIDE) {\n                    if (numInsideThis === 0) {                   // none inside this - outside\n                        return Flatten.OUTSIDE;\n                    }\n                    else if (numInsideThis === resp.length) {      // all from resp inside this - contains or interlace\n                        if (resp.length === polygon.faces.size) {\n                            return Flatten.CONTAINS;               // all faces from polygon are in response - contains\n                        }\n                        else {\n                            return Flatten.INTERLACE;              // some faces inside - interlace\n                        }\n                    }\n                    else {\n                        return Flatten.INTERLACE;                  // some faces inside - interlace\n                    }\n                }\n                else if (bvThisInOther === Flatten.INSIDE) {\n                    return numInsideThis === 0 ? Flatten.INSIDE : Flatten.INTERLACE;\n                }\n            }\n        }\n\n        /**\n         * Returns true if face of the polygon is simple (no self-intersection points found)\n         * NOTE: this method is incomplete because it doe not exclude touching points\n         * Real self intersection inverts orientation of the polygon.\n         * But this is also good enough for the demonstration of the idea\n         * @param {Edges} edges - reference to polygon.edges to provide search index\n         * @returns {boolean}\n         */\n        isSimple(edges) {\n            let ip = Face.getSelfIntersections(this, edges, true);\n            return ip.length == 0;\n        }\n\n        static getSelfIntersections(face, edges, exitOnFirst = false) {\n            let int_points = [];\n\n            // calculate intersections\n            for (let edge1 of face) {\n\n                // request edges of polygon in the box of edge1\n                let resp = edges.search(edge1.box);\n\n                // for each edge2 in response\n                for (let edge2 of resp) {\n\n                    // Skip itself\n                    if (edge1 === edge2)\n                        continue;\n\n                    // Skip next and previous edge if both are segment (if one of them arc - calc intersection)\n                    if (edge1.shape instanceof Flatten.Segment && edge2.shape instanceof Flatten.Segment &&\n                        (edge1.next === edge2 || edge1.prev === edge2))\n                        continue;\n\n                    // calculate intersections between edge1 and edge2\n                    let ip = edge1.shape.intersect(edge2.shape);\n\n                    // for each intersection point\n                    for (let pt of ip) {\n\n                        // skip start-end connections\n                        if (pt.equalTo(edge1.start) && pt.equalTo(edge2.end) && edge2 === edge1.prev)\n                            continue;\n                        if (pt.equalTo(edge1.end) && pt.equalTo(edge2.start) && edge2 === edge1.next)\n                            continue;\n\n                        int_points.push(pt);\n\n                        if (exitOnFirst)\n                            break;\n                    }\n\n                    if (int_points.length > 0 && exitOnFirst)\n                        break;\n                }\n\n                if (int_points.length > 0 && exitOnFirst)\n                    break;\n\n            }\n            return int_points;\n        }\n\n        toJSON() {\n            return this.edges.map(edge => edge.toJSON());\n        }\n\n        svg() {\n            let svgStr = `\\nM${this.first.start.x},${this.first.start.y}`;\n\n            for (let edge of this) {\n                svgStr += edge.svg();\n            }\n\n            svgStr += ` z`;\n            return svgStr;\n        }\n\n    };\n};","/**\n * Created by Alex Bol on 3/17/2017.\n */\n\nmodule.exports = function(Flatten) {\n    /**\n     * Class representing an edge of polygon. Edge shape may be Segment or Arc.\n     * Each edge contains references to the next and previous edges in the face of the polygon.\n     *\n     * @type {Edge}\n     */\n    Flatten.Edge = class Edge {\n        /**\n         * Construct new instance of edge\n         * @param {Shape} shape Shape of type Segment of Arc\n         */\n        constructor(shape) {\n            /**\n             * Shape of the edge: Segment or Arc\n             */\n            this.shape = shape;\n            /**\n             * Pointer to the next edge in the face\n             */\n            this.next;\n            /**\n             * Pointer to the previous edge in the face\n             */\n            this.prev;\n            /**\n             * Pointer to the face containing this edge\n             * @type {Face}\n             */\n            this.face;\n            /**\n             * \"Arc distance\" from the face start\n             * @type {number}\n             */\n            this.arc_length = 0;\n            /**\n             * Start inclusion flag (inside/outside/boundary)\n             * @type {Boolean}\n             */\n            this.bvStart = undefined;\n            /**\n             * End inclusion flag (inside/outside/boundary)\n             * @type {Boolean}\n             */\n            this.bvEnd = undefined;\n            /**\n             * Edge inclusion flag (Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY)\n             * @type {*}\n             */\n            this.bv = undefined;\n            /**\n             * Overlap flag for boundary edge (Flatten.OVERLAP_SAME/Flatten.OVERLAP_OPPOSITE)\n             * @type {*}\n             */\n            this.overlap = undefined;\n        }\n\n        /**\n         * Get edge start point\n         */\n        get start() {\n            return this.shape.start;\n        }\n\n        /**\n         * Get edge end point\n         */\n        get end() {\n            return this.shape.end;\n        }\n\n        /**\n         * Get edge length\n         */\n        get length() {\n            return this.shape.length;\n        }\n\n        /**\n         * Get bounding box of the edge\n         * @returns {Box}\n         */\n        get box() {\n            return this.shape.box;\n        }\n\n        isSegment() {\n            return this.shape instanceof Flatten.Segment;\n        }\n\n        isArc() {\n            return this.shape instanceof Flatten.Arc;\n        }\n        /**\n         * Get middle point of the edge\n         * @returns {Point}\n         */\n        middle() {\n            return this.shape.middle();\n        }\n\n        /**\n         * Returns true if point belongs to the edge, false otherwise\n         * @param {Point} pt - test point\n         */\n        contains(pt) {\n            return this.shape.contains(pt);\n        }\n\n        /**\n         * Set inclusion flag of the edge with respect to another polygon\n         * Inclusion flag is one of Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY\n         * @param polygon\n         */\n        setInclusion(polygon) {\n            if (this.bv !== undefined) return this.bv;\n\n            if (this.bvStart === undefined) {\n                this.bvStart = Flatten.ray_shoot(polygon, this.start);\n            }\n            if (this.bvEnd === undefined) {\n                this.bvEnd = Flatten.ray_shoot(polygon, this.end);\n            }\n            /* At least one end outside - the whole edge outside */\n            if (this.bvStart === Flatten.OUTSIDE || this.bvEnd == Flatten.OUTSIDE) {\n                this.bv = Flatten.OUTSIDE;\n            }\n            /* At least one end inside - the whole edge inside */\n            else if (this.bvStart === Flatten.INSIDE || this.bvEnd == Flatten.INSIDE) {\n                this.bv = Flatten.INSIDE;\n            }\n            /* Both are boundary - check the middle point */\n            else {\n                let bvMiddle = Flatten.ray_shoot(polygon, this.middle());\n                this.bv = bvMiddle;\n            }\n            return this.bv;\n        }\n\n        /**\n         * Set overlapping between two coincident boundary edges\n         * Overlapping flag is one of Flatten.OVERLAP_SAME or Flatten.OVERLAP_OPPOSITE\n         * @param edge\n         */\n        setOverlap(edge) {\n            let flag = undefined;\n            let shape1 = this.shape;\n            let shape2 = edge.shape;\n\n            if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Segment) {\n                if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end)) {\n                    flag = Flatten.OVERLAP_SAME;\n                }\n                else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start)) {\n                    flag = Flatten.OVERLAP_OPPOSITE;\n                }\n            }\n            else if (shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Arc) {\n                if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.counterClockwise === shape2.counterClockwise &&\n                    shape1.middle().equalTo(shape2.middle())) {\n                    flag = Flatten.OVERLAP_SAME;\n                }\n                else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.counterClockwise !== shape2.counterClockwise &&\n                    shape1.middle().equalTo(shape2.middle())) {\n                    flag = Flatten.OVERLAP_OPPOSITE;\n                }\n            }\n            else if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Arc ||\n                shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Segment) {\n                if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.middle().equalTo(shape2.middle())) {\n                    flag = Flatten.OVERLAP_SAME;\n                }\n                else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.middle().equalTo(shape2.middle())) {\n                    flag = Flatten.OVERLAP_OPPOSITE;\n                }\n            }\n\n            /* Do not update overlap flag if already set on previous chain */\n            if (this.overlap === undefined) this.overlap = flag;\n            if (edge.overlap === undefined) edge.overlap = flag;\n        }\n\n        svg() {\n            if (this.shape instanceof Flatten.Segment) {\n                return ` L${this.shape.end.x},${this.shape.end.y}`;\n            }\n            else if (this.shape instanceof  Flatten.Arc) {\n                let arc = this.shape;\n                let largeArcFlag;\n                let sweepFlag = arc.counterClockwise ? \"1\" : \"0\";\n\n                // Draw full circe arc as special case: split it into two half-circles\n                if (Flatten.Utils.EQ(arc.sweep, 2*Math.PI)) {\n                    let sign = arc.counterClockwise ? 1 : -1;\n                    let halfArc1 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle, arc.startAngle + sign*Math.PI, arc.counterClockwise);\n                    let halfArc2 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle + sign*Math.PI, arc.endAngle, arc.counterClockwise);\n\n                    largeArcFlag = \"0\";\n\n                    return ` A${halfArc1.r},${halfArc1.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc1.end.x},${halfArc1.end.y}\n                    A${halfArc2.r},${halfArc2.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc2.end.x},${halfArc2.end.y}`\n                }\n                else {\n                    largeArcFlag = arc.sweep <= Math.PI ? \"0\" : \"1\";\n\n                    return ` A${arc.r},${arc.r} 0 ${largeArcFlag},${sweepFlag} ${arc.end.x},${arc.end.y}`;\n                }\n            }\n        }\n\n        toJSON() {\n            let json = this.shape.clone();\n            // json.name = this.shape.constructor.name;          // not pass webpack minification\n            json.name = this.shape instanceof  Flatten.Segment ? \"segment\" : \"arc\";\n            return json;\n        }\n    };\n};","/**\n * Created by Alex Bol on 3/7/2017.\n */\n\"use strict\";\n\nmodule.exports = function(Flatten) {\n    /**\n     * Class Box represent bounding box of the shape\n     * @type {Box}\n     */\n    Flatten.Box = class Box {\n        /**\n         *\n         * @param {number} xmin - minimal x coordinate\n         * @param {number} ymin - minimal y coordinate\n         * @param {number} xmax - maximal x coordinate\n         * @param {number} ymax - maximal y coordinate\n         */\n        constructor(xmin=undefined, ymin=undefined, xmax=undefined, ymax=undefined) {\n            /**\n             * Minimal x coordinate\n             * @type {number}\n             */\n            this.xmin = xmin;\n            /**\n             * Minimal y coordinate\n             * @type {number}\n             */\n            this.ymin = ymin;\n            /**\n             * Maximal x coordinate\n             * @type {number}\n             */\n            this.xmax = xmax;\n            /**\n             * Maximal y coordinate\n             * @type {number}\n             */\n            this.ymax = ymax;\n        }\n\n        /**\n         * Clones and returns new instance of box\n         * @returns {Box}\n         */\n        clone() {\n            return new Box(this.xmin, this.ymin, this.xmax, this.ymax);\n        }\n\n        /**\n         * Property low need for interval tree interface\n         * @returns {Point}\n         */\n        get low() {\n            return new Flatten.Point(this.xmin, this.ymin);\n        }\n\n        /**\n         * Property high need for interval tree interface\n         * @returns {Point}\n         */\n        get high() {\n            return new Flatten.Point(this.xmax, this.ymax);\n        }\n\n        /**\n         * Property max returns the box itself !\n         * @returns {Box}\n         */\n        get max() {\n            return this.clone();\n        }\n\n        /**\n         * Return center of the box\n         * @returns {Point}\n         */\n        get center() {\n            return new Flatten.Point( (this.xmin + this.xmax)/2, (this.ymin + this.ymax)/2 );\n        }\n\n        /**\n         * Returns true if not intersected with other box\n         * @param {Box} other_box - other box to test\n         * @returns {boolean}\n         */\n        notIntersect(other_box) {\n            return (\n                this.xmax < other_box.xmin ||\n                this.xmin > other_box.xmax ||\n                this.ymax < other_box.ymin ||\n                this.ymin > other_box.ymax\n            );\n        }\n\n        /**\n         * Returns true if intersected with other box\n         * @param {Box} other_box - Query box\n         * @returns {boolean}\n         */\n        intersect(other_box) {\n            return !this.notIntersect(other_box);\n        }\n\n        /**\n         * Returns new box merged with other box\n         * @param {Box} other_box - Other box to merge with\n         * @returns {Box}\n         */\n        merge(other_box) {\n            return new Box(\n                this.xmin === undefined ? other_box.xmin : Math.min(this.xmin, other_box.xmin),\n                this.ymin === undefined ? other_box.ymin : Math.min(this.ymin, other_box.ymin),\n                this.xmax === undefined ? other_box.xmax : Math.max(this.xmax, other_box.xmax),\n                this.ymax === undefined ? other_box.ymax : Math.max(this.ymax, other_box.ymax)\n            );\n        }\n\n        /**\n         * Defines predicate \"less than\" between two boxes. Need for interval index\n         * @param {Box} other_box - other box\n         * @returns {boolean} - true if this box less than other box, false otherwise\n         */\n        less_than(other_box) {\n            if (this.low.lessThan(other_box.low))\n                return true;\n            if (this.low.equalTo(other_box.low) && this.high.lessThan(other_box.high))\n                return true;\n            return false;\n        }\n\n        /**\n         * Returns true if this box is equal to other box, false otherwise\n         * @param {Box} other_box - query box\n         * @returns {boolean}\n         */\n        equal_to(other_box) {\n            return (this.low.equalTo(other_box.low) && this.high.equalTo(other_box.high));\n        }\n\n        output() {\n            return this.clone();\n        }\n\n        maximal_val(box1, box2) {\n            // return pt1.lessThan(pt2) ? pt2.clone() : pt1.clone();\n            return box1.merge(box2);\n        }\n\n        val_less_than(pt1, pt2) {\n            return pt1.lessThan(pt2);\n        }\n\n        /**\n         * Set new values to the box object\n         * @param {number} xmin - miminal x coordinate\n         * @param {number} ymin - minimal y coordinate\n         * @param {number} xmax - maximal x coordinate\n         * @param {number} ymax - maximal y coordinate\n         */\n        set(xmin, ymin, xmax, ymax) {\n            this.xmin = xmin;\n            this.ymin = ymin;\n            this.xmax = xmax;\n            this.ymax = ymax;\n        }\n\n        /**\n         * Return string to draw circle in svg\n         * @param {Object} attrs - json structure with attributes of svg rectangle element,\n         * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\n         * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"none\"\n         * @returns {string}\n         */\n        svg(attrs = {}) {\n            let {stroke, strokeWidth, fill, id, className} = attrs;\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\n            let width = this.xmax - this.xmin;\n            let height = this.ymax - this.ymin;\n\n            return `\\n<rect x=\"${this.xmin}\" y=\"${this.ymin}\" width=${width} height=${height} stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" ${id_str} ${class_str} />`;\n        }\n    };\n};\n","/**\n * Created by Alex Bol on 3/10/2017.\n */\n\n\"use strict\";\n\nmodule.exports = function(Flatten) {\n    /**\n     * Class representing a circular arc\n     * @type {Arc}\n     */\n    Flatten.Arc = class Arc {\n        /**\n         *\n         * @param {Point} pc - arc center\n         * @param {number} r - arc radius\n         * @param {number} startAngle - start angle in radians from 0 to 2*PI\n         * @param {number} endAngle - end angle in radians from 0 to 2*PI\n         * @param {boolean} counterClockwise - arc direction, true - clockwise (or {@link Flatten.CCW}), false - counter clockwise (or {@link Flatten.CW)}\n         */\n        constructor(pc=new Flatten.Point(), r=1, startAngle=0, endAngle=2*Math.PI, counterClockwise=true) {\n            this.pc = pc.clone();\n            this.r = r;\n            this.startAngle = startAngle;\n            this.endAngle = endAngle;\n            this.counterClockwise = counterClockwise;\n        }\n\n        /**\n         * Return new instance of arc\n         * @returns {Arc}\n         */\n        clone() {\n            return new Flatten.Arc(this.pc.clone(), this.r, this.startAngle, this.endAngle, this.counterClockwise);\n        }\n\n        /**\n         * Get sweep angle in radians. Sweep angle is non-negative number from 0 to 2*PI\n         * @returns {number}\n         */\n        get sweep() {\n            if (Flatten.Utils.EQ(this.startAngle, this.endAngle))\n                return 0.0;\n            if (Flatten.Utils.EQ(Math.abs(this.startAngle - this.endAngle), Flatten.PIx2)) {\n                return Flatten.PIx2;\n            }\n            let sweep;\n            if (this.counterClockwise) {\n                sweep = Flatten.Utils.GT(this.endAngle, this.startAngle) ?\n                    this.endAngle - this.startAngle : this.endAngle - this.startAngle + Flatten.PIx2;\n            } else {\n                sweep = Flatten.Utils.GT(this.startAngle, this.endAngle) ?\n                    this.startAngle - this.endAngle : this.startAngle - this.endAngle + Flatten.PIx2;\n            }\n\n            if ( Flatten.Utils.GT(sweep, Flatten.PIx2) ) {\n                sweep -= Flatten.PIx2;\n            }\n            if ( Flatten.Utils.LT(sweep, 0) ) {\n                sweep += Flatten.PIx2;\n            }\n            return sweep;\n        }\n\n        /**\n         * Get start point of arc\n         * @returns {Point}\n         */\n        get start() {\n            let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\n            return p0.rotate(this.startAngle, this.pc);\n        }\n\n        /**\n         * Get end point of arc\n         * @returns {Point}\n         */\n        get end() {\n            let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\n            return p0.rotate(this.endAngle, this.pc);\n        }\n\n        /**\n         * Get center of arc\n         * @returns {Point}\n         */\n        get center() {\n            return this.pc.clone();\n        }\n\n        get vertices() {\n            return [this.start.clone(), this.end.clone()];\n        }\n\n        /**\n         * Get arc length\n         * @returns {number}\n         */\n        get length() {\n            return Math.abs(this.sweep*this.r);\n        }\n\n        /**\n         * Get bounding box of the arc\n         * @returns {Box}\n         */\n        get box() {\n            let func_arcs = this.breakToFunctional();\n            let box = func_arcs.reduce( (acc, arc) => acc.merge(arc.start.box), new Flatten.Box() );\n            box = box.merge(this.end.box);\n            return box;\n        }\n\n        /**\n         * Returns true if arc contains point, false otherwise\n         * @param {Point} pt - point to test\n         * @returns {boolean}\n         */\n        contains(pt) {\n            // first check if  point on circle (pc,r)\n            if (!Flatten.Utils.EQ(this.pc.distanceTo(pt)[0], this.r))\n                return false;\n\n            // point on circle\n\n            if (pt.equalTo(this.start))\n                return true;\n\n            let angle = new Flatten.Vector(this.pc, pt).slope;\n            let test_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise);\n            return Flatten.Utils.LE(test_arc.length, this.length);\n        }\n\n        /**\n         * When given point belongs to arc, return array of two arcs split by this point. If points is incident\n         * to start or end point of the arc, return clone of the arc. If point does not belong to the arcs, return\n         * empty array.\n         * @param {Point} pt Query point\n         * @returns {Arc[]}\n         */\n        split(pt) {\n            if (!this.contains(pt))\n                return [];\n\n            if (Flatten.Utils.EQ_0(this.sweep))\n                return [this.clone()];\n\n            if (this.start.equalTo(pt) || this.end.equalTo(pt))\n                return [this.clone()];\n\n            let angle = new Flatten.Vector(this.pc, pt).slope;\n\n            return [\n                new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise),\n                new Flatten.Arc(this.pc, this.r, angle, this.endAngle, this.counterClockwise)\n            ]\n        }\n\n        /**\n         * Return middle point of the arc\n         * @returns {Point}\n         */\n        middle() {\n            let endAngle = this.counterClockwise === Flatten.CCW ? this.startAngle + this.sweep/2 : this.startAngle - this.sweep/2;\n            let arc = new Flatten.Arc(this.pc, this.r, this.startAngle, endAngle, this.counterClockwise);\n            return arc.end;\n        }\n\n        /**\n         * Returns chord height (\"sagitta\") of the arc\n         * @returns {number}\n         */\n        chordHeight() {\n            return  (1.0 - Math.cos(Math.abs(this.sweep/2.0))) * this.r;\n        }\n\n        /**\n         * Returns array of intersection points between arc and other shape\n         * @param {Shape} shape Shape of the one of supported types Line, Circle, Segment, Arc <br/>\n         * TODO: support Polygon and Planar Set\n         * @returns {Points[]}\n         */\n        intersect(shape) {\n            if (shape instanceof Flatten.Line) {\n                return shape.intersect(this);\n            }\n            if (shape instanceof Flatten.Circle) {\n                return Arc.intersectArc2Circle(this, shape);\n            }\n            if (shape instanceof Flatten.Segment) {\n                return shape.intersect(this);\n            }\n            if (shape instanceof Flatten.Arc) {\n                return Arc.intersectArc2Arc(this, shape);\n            }\n        }\n\n        /**\n         * Calculate distance and shortest segment from arc to shape and return array [distance, shortest segment]\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\n         * @returns {number} distance from arc to shape\n         * @returns {Segment} shortest segment between arc and shape (started at arc, ended at shape)\n\n         */\n        distanceTo(shape) {\n            let {Distance} = Flatten;\n\n            if (shape instanceof Flatten.Point) {\n                let [dist, shortest_segment] = Distance.point2arc(shape, this);\n                shortest_segment = shortest_segment.reverse();\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Circle) {\n                let [dist, shortest_segment] = Distance.arc2circle(this, shape);\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Line) {\n                let [dist, shortest_segment] = Distance.arc2line(this, shape);\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Segment) {\n                let [dist, shortest_segment] = Distance.segment2arc(shape, this);\n                shortest_segment = shortest_segment.reverse();\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Arc) {\n                let [dist, shortest_segment] = Distance.arc2arc(this, shape);\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Polygon) {\n                let [dist, shortest_segment] = Distance.shape2polygon(this, shape);\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.PlanarSet) {\n                let [dist, shortest_segment] = Distance.shape2planarSet(this, shape);\n                return [dist, shortest_segment];\n            }\n        }\n\n        /**\n         * Breaks arc in extreme point 0, pi/2, pi, 3*pi/2 and returns array of sub-arcs\n         * @returns {Arcs[]}\n         */\n        breakToFunctional() {\n            let func_arcs_array = [];\n            let angles = [0, Math.PI/2, 2*Math.PI/2, 3*Math.PI/2];\n            let pts = [\n                this.pc.translate(this.r,0),\n                this.pc.translate(0,this.r),\n                this.pc.translate(-this.r,0),\n                this.pc.translate(0,-this.r)\n            ];\n\n            // If arc contains extreme point,\n            // create test arc started at start point and ended at this extreme point\n            let test_arcs = [];\n            for (let i=0; i < 4; i++) {\n                if (pts[i].on(this)) {\n                    test_arcs.push(new Flatten.Arc(this.pc, this.r, this.startAngle, angles[i], this.counterClockwise));\n                }\n            }\n\n            if (test_arcs.length == 0) {                  // arc does contain any extreme point\n                func_arcs_array.push(this.clone());\n            }\n            else {                                        // arc passes extreme point\n                // sort these arcs by length\n                test_arcs.sort((arc1, arc2) => arc1.length - arc2.length);\n\n                for (let i = 0; i < test_arcs.length; i++) {\n                    let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\n                    let new_arc;\n                    if (prev_arc) {\n                        new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, test_arcs[i].endAngle, this.counterClockwise);\n                    }\n                    else {\n                        new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, test_arcs[i].endAngle, this.counterClockwise);\n                    }\n                    if (!Flatten.Utils.EQ_0(new_arc.length)) {\n                        func_arcs_array.push(new_arc.clone());\n                    }\n                }\n\n                // add last sub arc\n                let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\n                let new_arc;\n                if (prev_arc) {\n                    new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, this.endAngle, this.counterClockwise);\n                }\n                else {\n                    new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, this.endAngle, this.counterClockwise);\n                }\n                if (!Flatten.Utils.EQ_0(new_arc.length)) {\n                    func_arcs_array.push(new_arc.clone());\n                }\n            }\n            return func_arcs_array;\n        }\n\n        /**\n         * Return tangent unit vector in the start point in the direction from start to end\n         * @returns {Vector}\n         */\n        tangentInStart() {\n            let vec = new Flatten.Vector(this.pc, this.start);\n            let angle = this.counterClockwise ? Math.PI/2. : -Math.PI/2.;\n            let tangent = vec.rotate(angle).normalize();\n            return tangent;\n        }\n\n        /**\n         * Return tangent unit vector in the end point in the direction from end to start\n         * @returns {Vector}\n         */\n        tangentInEnd() {\n            let vec = new Flatten.Vector(this.pc, this.end);\n            let angle = this.counterClockwise ? -Math.PI/2. : Math.PI/2.;\n            let tangent = vec.rotate(angle).normalize();\n            return tangent;\n        }\n\n        /**\n         * Returns new arc with swapped start and end angles and reversed direction\n         * @returns {Arc}\n         */\n        reverse() {\n            return new Arc(this.pc, this.r, this.endAngle, this.startAngle, !this.counterClockwise);\n        }\n\n        /**\n         * Returns new arc translated by vector vec\n         * @param {Vector} vec\n         * @returns {Segment}\n         */\n        translate(...args) {\n            let arc = this.clone();\n            arc.pc = this.pc.translate(...args);\n            return arc;\n        }\n\n        /**\n         * Return new segment rotated by given angle around given point\n         * If point omitted, rotate around origin (0,0)\n         * Positive value of angle defines rotation counter clockwise, negative - clockwise\n         * @param {number} angle - rotation angle in radians\n         * @param {Point} center - center point, default is (0,0)\n         * @returns {Arc}\n         */\n        rotate(angle = 0, center = new Flatten.Point()) {\n            let m = new Flatten.Matrix();\n            m = m.translate(center.x, center.y).rotate(angle).translate(-center.x, -center.y);\n            return this.transform(m);\n        }\n\n        /**\n         * Return new arc transformed using affine transformation matrix <br/>\n         * Note, that non-equal scaling by x and y (matrix[0] != matrix[3]) produce illegal result\n         * TODO: support non-equal scaling arc to ellipse or throw exception ?\n         * @param {Matrix} matrix - affine transformation matrix\n         * @returns {Arc}\n         */\n        transform(matrix = new Flatten.Matrix()) {\n            let newStart = this.start.transform(matrix);\n            let newEnd = this.end.transform(matrix);\n            let newCenter = this.pc.transform(matrix);\n            let arc = Arc.arcSE(newCenter, newStart, newEnd, this.counterClockwise);\n            return arc;\n        }\n\n        static arcSE(center, start, end, counterClockwise) {\n            let {vector} = Flatten;\n            let startAngle = vector(center,start).slope;\n            let endAngle = vector(center, end).slope;\n            if (Flatten.Utils.EQ(startAngle, endAngle)) {\n                endAngle += 2*Math.PI;\n                counterClockwise = true;\n            }\n            let r = vector(center, start).length;\n\n            return new Arc(center, r, startAngle, endAngle, counterClockwise);\n        }\n\n        static intersectArc2Arc(arc1, arc2) {\n            var ip = [];\n\n            if (arc1.box.notIntersect(arc2.box)) {\n                return ip;\n            }\n\n            // Special case: overlapping arcs\n            // May return up to 4 intersection points\n            if (arc1.pc.equalTo(arc2.pc) && Flatten.Utils.EQ(arc1.r, arc2.r)) {\n                let pt;\n\n                pt = arc1.start;\n                if (pt.on(arc2))\n                    ip.push(pt);\n\n                pt = arc1.end;\n                if (pt.on(arc2))\n                    ip.push(pt);\n\n                pt = arc2.start;\n                if (pt.on(arc1)) ip.push(pt);\n\n                pt = arc2.end;\n                if (pt.on(arc1)) ip.push(pt);\n\n                return ip;\n            }\n\n            // Common case\n            let circle1 = new Flatten.Circle(arc1.pc, arc1.r);\n            let circle2 = new Flatten.Circle(arc2.pc, arc2.r);\n            let ip_tmp =  circle1.intersect(circle2);\n            for (let pt of ip_tmp) {\n                if (pt.on(arc1) && pt.on(arc2)) {\n                    ip.push(pt);\n                }\n            }\n            return ip;\n        }\n\n        static intersectArc2Circle(arc, circle) {\n            let ip = [];\n\n            if (arc.box.notIntersect(circle.box)) {\n                return ip;\n            }\n\n            // Case when arc center incident to circle center\n            // Return arc's end points as 2 intersection points\n            if (circle.pc.equalTo(arc.pc) && Flatten.Utils.EQ(circle.r, arc.r)) {\n                ip.push(arc.start);\n                ip.push(arc.end);\n                return ip;\n            }\n\n            // Common case\n            let circle1 = circle;\n            let circle2 = new Flatten.Circle(arc.pc, arc.r);\n            let ip_tmp = circle1.intersect(circle2);\n            for (let pt of ip_tmp) {\n                if (pt.on(arc)) {\n                    ip.push(pt);\n                }\n            }\n            return ip;\n        }\n\n        definiteIntegral(ymin=0) {\n            let f_arcs = this.breakToFunctional();\n            let area = f_arcs.reduce( (acc, arc) => acc + arc.circularSegmentDefiniteIntegral(ymin), 0.0 );\n            return area;\n        }\n\n        circularSegmentDefiniteIntegral(ymin) {\n            let line = new Flatten.Line(this.start, this.end);\n            let onLeftSide = this.pc.leftTo(line);\n            let segment = new Flatten.Segment(this.start, this.end);\n            let areaTrapez = segment.definiteIntegral(ymin);\n            let areaCircularSegment = this.circularSegmentArea();\n            let area = onLeftSide ? areaTrapez - areaCircularSegment : areaTrapez + areaCircularSegment;\n            return area;\n        }\n\n        circularSegmentArea() {\n            return (0.5*this.r*this.r*(this.sweep - Math.sin(this.sweep)))\n        }\n\n        /**\n         * Return string to draw arc in svg\n         * @param {Object} attrs - json structure with attributes of svg path element,\n         * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\n         * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"none\"\n         * @returns {string}\n         */\n        svg(attrs = {}) {\n            let largeArcFlag = this.sweep <= Math.PI ? \"0\" : \"1\";\n            let sweepFlag = this.counterClockwise ? \"1\" : \"0\";\n            let {stroke, strokeWidth, fill, id, className} = attrs;\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\n\n            if (Flatten.Utils.EQ(this.sweep, 2*Math.PI)) {\n                let circle = new Flatten.Circle(this.pc, this.r);\n                return circle.svg(attrs);\n            }\n            else {\n                return `\\n<path d=\"M${this.start.x},${this.start.y}\n                             A${this.r},${this.r} 0 ${largeArcFlag},${sweepFlag} ${this.end.x},${this.end.y}\"\n                    stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" ${id_str} ${class_str} />`\n            }\n        }\n    };\n\n    /**\n     * Function to create arc equivalent to \"new\" constructor\n     * @param args\n     */\n    Flatten.arc = (...args) => new Flatten.Arc(...args);\n};","/**\n * Created by Alex Bol on 3/10/2017.\n */\n\n\"use strict\";\n\nmodule.exports = function (Flatten) {\n    /**\n     * Class representing a segment\n     * @type {Segment}\n     */\n    Flatten.Segment = class Segment {\n        /**\n         *\n         * @param {Point} ps - start point\n         * @param {Point} pe - end point\n         */\n        constructor(...args) {\n            /**\n             * Start point\n             * @type {Point}\n             */\n            this.ps = new Flatten.Point();\n            /**\n             * End Point\n             * @type {Point}\n             */\n            this.pe = new Flatten.Point();\n\n            if (args.length == 0) {\n                return;\n            }\n\n            if (args.length == 1 && args[0] instanceof Array && args[0].length == 4) {\n                let coords = args[0];\n                this.ps = new Flatten.Point(coords[0], coords[1]);\n                this.pe = new Flatten.Point(coords[2], coords[3]);\n                return;\n            }\n\n            if (args.length == 2 && args[0] instanceof Flatten.Point && args[1] instanceof Flatten.Point) {\n                this.ps = args[0].clone();\n                this.pe = args[1].clone();\n                return;\n            }\n\n            if (args.length == 4) {\n                this.ps = new Flatten.Point(args[0], args[1]);\n                this.pe = new Flatten.Point(args[2], args[3]);\n                return;\n            }\n\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\n        }\n\n        /**\n         * Method clone copies segment and returns a new instance\n         * @returns {Segment}\n         */\n        clone() {\n            return new Flatten.Segment(this.start, this.end);\n        }\n\n        /**\n         * Start point\n         * @returns {Point}\n         */\n        get start() {\n            return this.ps;\n        }\n\n        /**\n         * End point\n         * @returns {Point}\n         */\n        get end() {\n            return this.pe;\n        }\n\n\n        /**\n         * Returns array of start and end point\n         * @returns [Point,Point]\n         */\n        get vertices() {\n            return [this.ps.clone(), this.pe.clone()];\n        }\n\n        /**\n         * Length of a segment\n         * @returns {number}\n         */\n        get length() {\n            return this.start.distanceTo(this.end)[0];\n        }\n\n        /**\n         * Slope of the line - angle to axe x in radians from 0 to 2PI\n         * @returns {number}\n         */\n        get slope() {\n            let vec = new Flatten.Vector(this.start, this.end);\n            return vec.slope;\n        }\n\n        /**\n         * Bounding box\n         * @returns {Box}\n         */\n        get box() {\n            return new Flatten.Box(\n                Math.min(this.start.x, this.end.x),\n                Math.min(this.start.y, this.end.y),\n                Math.max(this.start.x, this.end.x),\n                Math.max(this.start.y, this.end.y)\n            )\n        }\n\n        /**\n         * Returns true if equals to query segment, false otherwise\n         * @param {Seg} seg - query segment\n         * @returns {boolean}\n         */\n        equalTo(seg) {\n            return this.ps.equalTo(seg.ps) && this.pe.equalTo(seg.pe);\n        }\n\n        /**\n         * Returns true if segment contains point\n         * @param {Point} pt Query point\n         * @returns {boolean}\n         */\n        contains(pt) {\n            return Flatten.Utils.EQ_0(this.distanceToPoint(pt));\n        }\n\n        /**\n         * Returns array of intersection points between segment and other shape\n         * @param {Shape} shape - Shape of the one of supported types Line, Circle, Segment, Arc <br/>\n         * TODO: support Polygon and Planar Set\n         * @returns {Point[]}\n         */\n        intersect(shape) {\n            if (shape instanceof Flatten.Line) {\n                return Segment.intersectSegment2Line(this, shape);\n            }\n\n            if (shape instanceof Flatten.Segment) {\n                return Segment.intersectSegment2Segment(this, shape);\n            }\n\n            if (shape instanceof Flatten.Circle) {\n                return Segment.intersectSegment2Circle(this, shape);\n            }\n\n            if (shape instanceof Flatten.Arc) {\n                return Segment.intersectSegment2Arc(this, shape);\n            }\n        }\n\n        /**\n         * Calculate distance and shortest segment from segment to shape and return as array [distance, shortest segment]\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\n         * @returns {number} distance from segment to shape\n         * @returns {Segment} shortest segment between segment and shape (started at segment, ended at shape)\n         */\n        distanceTo(shape) {\n            let {Distance} = Flatten;\n\n            if (shape instanceof Flatten.Point) {\n                let [dist, shortest_segment] = Distance.point2segment(shape, this);\n                shortest_segment = shortest_segment.reverse();\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Circle) {\n                let [dist, shortest_segment] = Distance.segment2circle(this, shape);\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Line) {\n                let [dist, shortest_segment] = Distance.segment2line(this, shape);\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Segment) {\n                let [dist, shortest_segment] = Distance.segment2segment(this, shape);\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Arc) {\n                let [dist, shortest_segment] = Distance.segment2arc(this, shape);\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Polygon) {\n                let [dist, shortest_segment] = Distance.shape2polygon(this, shape);\n                return [dist, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.PlanarSet) {\n                let [dist, shortest_segment] = Distance.shape2planarSet(this, shape);\n                return [dist, shortest_segment];\n            }\n        }\n\n        /**\n         * Returns unit vector in the direction from start to end\n         * @returns {Vector}\n         */\n        tangentInStart() {\n            let vec = new Flatten.Vector(this.start, this.end);\n            return vec.normalize();\n        }\n\n        /**\n         * Return unit vector in the direction from end to start\n         * @returns {Vector}\n         */\n        tangentInEnd() {\n            let vec = new Flatten.Vector(this.end, this.start);\n            return vec.normalize();\n        }\n\n        /**\n         * Returns new segment with swapped start and end points\n         * @returns {Segment}\n         */\n        reverse() {\n            return new Segment(this.end, this.start);\n        }\n\n        /**\n         * When point belongs to segment, return array of two segments split by given point,\n         * if point is inside segment. Returns clone of this segment if query point is incident\n         * to start or end point of the segment. Returns empty array if point does not belong to segment\n         * @param {Point} pt Query point\n         * @returns {Segment[]}\n         */\n        split(pt) {\n            if (!this.contains(pt))\n                return [];\n\n            if (this.start.equalTo(this.end))\n                return [this.clone()];\n\n            if (this.start.equalTo(pt) || this.end.equalTo(pt))\n                return [this];\n\n            return [\n                new Flatten.Segment(this.start, pt),\n                new Flatten.Segment(pt, this.end)\n            ]\n        }\n\n        /**\n         * Return middle point of the segment\n         * @returns {Point}\n         */\n        middle() {\n            return new Flatten.Point((this.start.x + this.end.x)/2, (this.start.y + this.end.y)/2);\n        }\n\n        distanceToPoint(pt) {\n            let [dist, ...rest] = Flatten.Distance.point2segment(pt, this);\n            return dist;\n        };\n\n        definiteIntegral(ymin = 0.0) {\n            let dx = this.end.x - this.start.x;\n            let dy1 = this.start.y - ymin;\n            let dy2 = this.end.y - ymin;\n            return ( dx * (dy1 + dy2) / 2 );\n        }\n\n        /**\n         * Returns new segment translated by vector vec\n         * @param {Vector} vec\n         * @returns {Segment}\n         */\n        translate(...args) {\n            return new Segment(this.ps.translate(...args), this.pe.translate(...args));\n        }\n\n        /**\n         * Return new segment rotated by given angle around given point\n         * If point omitted, rotate around origin (0,0)\n         * Positive value of angle defines rotation counter clockwise, negative - clockwise\n         * @param {number} angle - rotation angle in radians\n         * @param {Point} center - center point, default is (0,0)\n         * @returns {Segment}\n         */\n        rotate(angle = 0, center = new Flatten.Point()) {\n            let m = new Flatten.Matrix();\n            m = m.translate(center.x, center.y).rotate(angle).translate(-center.x, -center.y);\n            return this.transform(m);\n        }\n\n        /**\n         * Return new segment transformed using affine transformation matrix\n         * @param {Matrix} matrix - affine transformation matrix\n         * @returns {Segment} - transformed segment\n         */\n        transform(matrix = new Flatten.Matrix()) {\n            return new Segment(this.ps.transform(matrix), this.pe.transform(matrix))\n        }\n\n        /**\n         * Returns true if segment start is equal to segment end up to DP_TOL\n         * @returns {boolean}\n         */\n        isZeroLength() {\n            return this.ps.equalTo(this.pe)\n        }\n\n        static intersectSegment2Line(seg, line) {\n            let ip = [];\n\n            // Boundary cases\n            if (seg.ps.on(line)) {\n                ip.push(seg.ps);\n            }\n            // If both ends lay on line, return two intersection points\n            if (seg.pe.on(line) && !seg.isZeroLength()) {\n                ip.push(seg.pe);\n            }\n\n            if (ip.length > 0) {\n                return ip;          // done, intersection found\n            }\n\n            // If zero-length segment and nothing found, return no intersections\n            if (seg.isZeroLength()) {\n                return ip;\n            }\n\n            // Not a boundary case, check if both points are on the same side and\n            // hence there is no intersection\n            if (seg.ps.leftTo(line) && seg.pe.leftTo(line) ||\n                !seg.ps.leftTo(line) && !seg.pe.leftTo(line)) {\n                return ip;\n            }\n\n            // Calculate intersection between lines\n            let line1 = new Flatten.Line(seg.ps, seg.pe);\n            return line1.intersect(line);\n        }\n\n        static intersectSegment2Segment(seg1, seg2) {\n            let ip = [];\n\n            // quick reject\n            if (seg1.box.notIntersect(seg2.box)) {\n                return ip;\n            }\n\n            // Special case of seg1 zero length\n            if (seg1.isZeroLength()) {\n                if (seg1.ps.on(seg2)) {\n                    ip.push(seg1.ps);\n                }\n                return ip;\n            }\n\n            // Special case of seg2 zero length\n            if (seg2.isZeroLength()) {\n                if (seg2.ps.on(seg1)) {\n                    ip.push(seg2.ps);\n                }\n                return ip;\n            }\n\n            // Neither seg1 nor seg2 is zero length\n            let line1 = new Flatten.Line(seg1.ps, seg1.pe);\n            let line2 = new Flatten.Line(seg2.ps, seg2.pe);\n\n            // Check overlapping between segments in case of incidence\n            // If segments touching, add one point. If overlapping, add two points\n            if (line1.incidentTo(line2)) {\n                if (seg1.ps.on(seg2)) {\n                    ip.push(seg1.ps);\n                }\n                if (seg1.pe.on(seg2)) {\n                    ip.push(seg1.pe);\n                }\n                if (seg2.ps.on(seg1) && !seg2.ps.equalTo(seg1.ps) && !seg2.ps.equalTo(seg1.pe)) {\n                    ip.push(seg2.ps);\n                }\n                if (seg2.pe.on(seg1) && !seg2.pe.equalTo(seg1.ps) && !seg2.pe.equalTo(seg1.pe)) {\n                    ip.push(seg2.pe);\n                }\n            }\n            else {                /* not incident - parallel or intersect */\n                // Calculate intersection between lines\n                let new_ip = line1.intersect(line2);\n                if (new_ip.length > 0 && new_ip[0].on(seg1) && new_ip[0].on(seg2)) {\n                    ip.push(new_ip[0]);\n                }\n            }\n\n            return ip;\n        }\n\n        static intersectSegment2Circle(segment, circle) {\n            let ips = [];\n\n            if (segment.box.notIntersect(circle.box)) {\n                return ips;\n            }\n\n            // Special case of zero length segment\n            if (segment.isZeroLength()) {\n                let [dist,shortest_segment] = segment.ps.distanceTo(circle.pc);\n                if (Flatten.Utils.EQ(dist, circle.r)) {\n                    ips.push(segment.ps);\n                }\n                return ips;\n            }\n\n            // Non zero-length segment\n            let line = new Flatten.Line(segment.ps, segment.pe);\n\n            let ips_tmp = line.intersect(circle);\n\n            for (let ip of ips_tmp) {\n                if (ip.on(segment)) {\n                    ips.push(ip);\n                }\n            }\n\n            return ips;\n        }\n\n        static intersectSegment2Arc(segment, arc) {\n            let ip = [];\n\n            if (segment.box.notIntersect(arc.box)) {\n                return ip;\n            }\n\n            // Special case of zero-length segment\n            if (segment.isZeroLength()) {\n                if (segment.ps.on(arc)) {\n                    ip.push(segment.ps);\n                }\n                return ip;\n            }\n\n            // Non-zero length segment\n            let line = new Flatten.Line(segment.ps, segment.pe);\n            let circle = new Flatten.Circle(arc.pc, arc.r);\n\n            let ip_tmp = line.intersect(circle);\n\n            for (let pt of ip_tmp) {\n                if (pt.on(segment) && pt.on(arc)) {\n                    ip.push(pt);\n                }\n            }\n            return ip;\n\n        }\n\n        /**\n         * Return string to draw segment in svg\n         * @param {Object} attrs - Object with attributes for svg path element,\n         * like \"stroke\", \"strokeWidth\" <br/>\n         * Defaults are stroke:\"black\", strokeWidth:\"1\"\n         * @returns {string}\n         */\n        svg(attrs = {}) {\n            let {stroke, strokeWidth, id, className} = attrs;\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\n\n            return `\\n<line x1=\"${this.start.x}\" y1=\"${this.start.y}\" x2=\"${this.end.x}\" y2=\"${this.end.y}\" stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" ${id_str} ${class_str} />`;\n\n        }\n    };\n\n    /**\n     * Shortcut method to create new segment\n     */\n    Flatten.segment = (...args) => new Flatten.Segment(...args);\n};","/**\n * Created by Alex Bol on 3/6/2017.\n */\n\n\"use strict\";\n\nmodule.exports = function(Flatten) {\n    let {Arc,vector} = Flatten;\n    /**\n     * Class representing a circle\n     * @type {Circle}\n     */\n    Flatten.Circle = class Circle {\n        /**\n         *\n         * @param {Point} pc - circle center point\n         * @param {number} r - circle radius\n         */\n        constructor(pc, r) {\n            /**\n             * Circle center\n             * @type {Point}\n             */\n            this.pc = pc;\n            /**\n             * Circle radius\n             * @type {number}\n             */\n            this.r = r;\n        }\n\n        /**\n         * Method clone returns new instance of a Circle\n         * @returns {Circle}\n         */\n        clone() {\n            return new Flatten.Circle(this.pc.clone(), this.r);\n        }\n\n        /**\n         * Circle center\n         * @returns {Point}\n         */\n        get center() {\n            return this.pc;\n        }\n\n        /**\n         * Circle bounding box\n         * @returns {Box}\n         */\n        get box() {\n            return new Flatten.Box(\n                this.pc.x - this.r,\n                this.pc.y - this.r,\n                this.pc.x + this.r,\n                this.pc.y + this.r\n            );\n        }\n\n        /**\n         * Return true if circle contains point\n         * @param {Point} pt - test point\n         * @returns {boolean}\n         */\n        contains(pt) {\n            return Flatten.Utils.LE(pt.distanceTo(this.center)[0], this.r);\n        }\n\n        /**\n         * Transform circle to closed arc\n         * @param {boolean} counterclockwise\n         * @returns {Arc}\n         */\n        toArc(counterclockwise=true) {\n            return new Flatten.Arc(this.center, this.r, Math.PI, -Math.PI, counterclockwise);\n        }\n\n        /**\n         * Returns array of intersection points between circle and other shape\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc\n         * @returns {Point[]}\n         */\n        intersect(shape) {\n            if (shape instanceof Flatten.Line) {\n                return shape.intersect(this);\n            }\n\n            if (shape instanceof Flatten.Segment) {\n                return shape.intersect(this);\n            }\n\n            if (shape instanceof Flatten.Circle) {\n                return Circle.intersectCirle2Circle(this, shape);\n            }\n\n            if (shape instanceof Flatten.Arc) {\n                return shape.intersect(this);\n            }\n        }\n\n        /**\n         * Calculate distance and shortest segment from circle to shape and return array [distance, shortest segment]\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\n         * @returns {number} distance from circle to shape\n         * @returns {Segment} shortest segment between circle and shape (started at circle, ended at shape)\n\n         */\n        distanceTo(shape) {\n            let {Distance} = Flatten;\n            let {point2circle, circle2circle, circle2line, segment2circle, arc2circle} = Distance;\n\n            if (shape instanceof Flatten.Point) {\n                let [distance, shortest_segment] = point2circle(shape, this);\n                shortest_segment = shortest_segment.reverse();\n                return [distance, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Circle) {\n                let [distance, shortest_segment] = circle2circle(this, shape);\n                return [distance, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Line) {\n                let [distance, shortest_segment] = circle2line(this, shape);\n                return [distance, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Segment) {\n                let [distance, shortest_segment] = segment2circle(shape, this);\n                shortest_segment = shortest_segment.reverse();\n                return [distance, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Arc) {\n                let [distance, shortest_segment] = arc2circle(shape, this);\n                shortest_segment = shortest_segment.reverse();\n                return [distance, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Polygon) {\n                let [distance, shortest_segment] = Distance.shape2polygon(this, shape);\n                return [distance, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.PlanarSet) {\n                let [dist, shortest_segment] = Distance.shape2planarSet(this, shape);\n                return [dist, shortest_segment];\n            }\n        }\n\n        static intersectCirle2Circle(circle1, circle2) {\n            let ip = [];\n\n            if (circle1.box.notIntersect(circle2.box)) {\n                return ip;\n            }\n\n            let vec = new Flatten.Vector(circle1.pc, circle2.pc);\n\n            let r1 = circle1.r;\n            let r2 = circle2.r;\n\n            // Degenerated circle\n            if (Flatten.Utils.EQ_0(r1) || Flatten.Utils.EQ_0(r2))\n                return ip;\n\n            // In case of equal circles return one leftmost point\n            if (Flatten.Utils.EQ_0(vec.x) && Flatten.Utils.EQ_0(vec.y) && Flatten.Utils.EQ(r1, r2)) {\n                ip.push(circle1.pc.translate(-r1, 0));\n                return ip;\n            }\n\n            let dist = circle1.pc.distanceTo(circle2.pc)[0];\n\n            if (Flatten.Utils.GT(dist, r1 + r2))               // circles too far, no intersections\n                return ip;\n\n            if (Flatten.Utils.LT(dist, Math.abs(r1 - r2)))     // one circle is contained within another, no intersections\n                return ip;\n\n            // Normalize vector.\n            vec.x /= dist;\n            vec.y /= dist;\n\n            let pt;\n\n            // Case of touching from outside or from inside - single intersection point\n            // TODO: check this specifically not sure if correct\n            if (Flatten.Utils.EQ(dist, r1 + r2) || Flatten.Utils.EQ(dist, Math.abs(r1 - r2))) {\n                pt = circle1.pc.translate(r1*vec.x, r1*vec.y);\n                ip.push(pt);\n                return ip;\n            }\n\n            // Case of two intersection points\n\n            // Distance from first center to center of common chord:\n            //   a = (r1^2 - r2^2 + d^2) / 2d\n            // Separate for better accuracy\n            let a = (r1*r1)/(2*dist) - (r2*r2)/(2*dist) + dist/2;\n\n            let mid_pt = circle1.pc.translate(a*vec.x, a*vec.y);\n            let h = Math.sqrt(r1*r1 - a*a);\n            // let norm;\n\n            // norm = vec.rotate90CCW().multiply(h);\n            pt = mid_pt.translate(vec.rotate90CCW().multiply(h));\n            ip.push(pt);\n\n            // norm = vec.rotate90CW();\n            pt = mid_pt.translate(vec.rotate90CW().multiply(h));\n            ip.push(pt);\n\n            return ip;\n        }\n\n        /**\n         * Return string to draw circle in svg\n         * @param {Object} attrs - json structure with attributes of svg circle element,\n         * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\n         * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"none\"\n         * @returns {string}\n         */\n        svg(attrs = {}) {\n            let {stroke, strokeWidth, fill, fillOpacity, id, className} = attrs;\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\n\n            return `\\n<circle cx=\"${this.pc.x}\" cy=\"${this.pc.y}\" r=\"${this.r}\" stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" fill-opacity=\"${fillOpacity || 1.0}\" ${id_str} ${class_str} />`;\n        }\n    };\n\n    /**\n     * Shortcut to create new circle\n     * @param args\n     */\n    Flatten.circle = (...args) => new Flatten.Circle(...args);\n};","/**\n * Created by Alex Bol on 2/20/2017.\n */\n\"use strict\";\n\nmodule.exports = function(Flatten) {\n    /**\n     * Class representing a line\n     * @type {Line}\n     */\n    Flatten.Line = class Line {\n        /**\n         * Line may be constructed by point and normal vector or by two points that a line passes through\n         * @param {Point} pt - point that a line passes through\n         * @param {Vector|Point} norm - normal vector to a line or second point a line passes through\n         */\n        constructor(...args) {\n            /**\n             * Point a line passes through\n             * @type {Point}\n             */\n            this.pt = new Flatten.Point();\n            /**\n             * Normal vector to a line <br/>\n             * Vector is normalized (length == 1)\n             * @type {Vector}\n             */\n            this.norm = new Flatten.Vector(0,1);\n\n            if (args.length == 0) {\n                return;\n            }\n\n            if (args.length == 2) {\n                let a1 = args[0];\n                let a2 = args[1];\n\n                if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\n                    this.pt = a1;\n                    this.norm = Line.points2norm(a1, a2);\n                    return;\n                }\n\n                if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Vector) {\n                    if (Flatten.Utils.EQ_0(a2.x) && Flatten.Utils.EQ_0(a2.y)) {\n                        throw Flatten.Errors.ILLEGAL_PARAMETERS;\n                    }\n                    this.pt = a1.clone();\n                    this.norm = a2.clone();\n                    this.norm = this.norm.normalize();\n                    return;\n                }\n\n                if (a1 instanceof Flatten.Vector && a2 instanceof Flatten.Point) {\n                    if (Flatten.Utils.EQ_0(a1.x) && Flatten.Utils.EQ_0(a1.y)) {\n                        throw Flatten.Errors.ILLEGAL_PARAMETERS;\n                    }\n                    this.pt = a2.clone();\n                    this.norm = a1.clone();\n                    this.norm = this.norm.normalize();\n                    return;\n                }\n            }\n\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\n        }\n\n        /**\n         * Returns cloned new instance of a line\n         * @returns {Line}\n         */\n        clone() {\n            return new Flatten.Line(this.pt, this.norm);\n        }\n\n        /**\n         * Slope of the line - angle in radians between line and axe x from 0 to 2PI\n         * @returns {number} - slope of the line\n         */\n        get slope() {\n            let vec = new Flatten.Vector(this.norm.y, -this.norm.x);\n            return vec.slope;\n        }\n\n        /**\n         * Get coefficients [A,B,C] of a standard line equation in the form Ax + By = C\n         * @code [A, B, C] = line.standard\n         * @returns {number[]} - array of coefficients\n         */\n        get standard() {\n            let A = this.norm.x;\n            let B = this.norm.y;\n            let C = this.norm.dot(this.pt);\n\n            return [A,B,C];\n        }\n\n        /**\n         * Return true if parallel or incident to other line\n         * @param {Line} other_line - line to check\n         * @returns {boolean}\n         */\n        parallelTo(other_line) {\n            return Flatten.Utils.EQ_0(this.norm.cross(other_line.norm));\n        }\n\n        /**\n         * Returns true if incident to other line\n         * @param {Line} other_line - line to check\n         * @returns {boolean}\n         */\n        incidentTo(other_line) {\n            return this.parallelTo(other_line) && this.pt.on(other_line);\n        }\n\n        /**\n         * Returns true if point belongs to line\n         * @param {Point} pt Query point\n         * @returns {boolean}\n         */\n        contains(pt) {\n            if (this.pt.equalTo(pt)) {\n                return true;\n            }\n            /* Line contains point if vector to point is orthogonal to the line normal vector */\n            let vec = new Flatten.Vector(this.pt, pt);\n            return Flatten.Utils.EQ_0(this.norm.dot(vec));\n        }\n\n        /**\n         * Returns array of intersection points\n         * @param {Shape} shape - shape to intersect with of the type Line, Circle, Segment, Arc\n         * @returns {Point[]}\n         */\n        intersect(shape) {\n            if (shape instanceof Flatten.Line) {\n                return Line.intersectLine2Line(this, shape);\n            }\n\n            if (shape instanceof Flatten.Circle) {\n                return Line.intersectLine2Circle(this, shape);\n            }\n\n            if (shape instanceof Flatten.Segment) {\n                return shape.intersect(this);\n            }\n\n            if (shape instanceof Flatten.Arc) {\n                return Line.intersectLine2Arc(this, shape);\n            }\n        }\n\n        /**\n         * Calculate distance and shortest segment from line to shape and returns array [distance, shortest_segment]\n         * @param {Shape} shape Shape of the one of the types Point, Circle, Segment, Arc, Polygon\n         * @returns {Number}\n         * @returns {Segment}\n         */\n        distanceTo(shape) {\n            let {Distance} = Flatten;\n\n            if (shape instanceof Flatten.Point) {\n                let [distance, shortest_segment] = Distance.point2line(shape, this);\n                shortest_segment = shortest_segment.reverse();\n                return [distance, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Circle) {\n                let [distance, shortest_segment] = Distance.circle2line(shape, this);\n                shortest_segment = shortest_segment.reverse();\n                return [distance, shortest_segment];\n            }\n\n            if (shape instanceof Flatten.Segment) {\n                let [distance, shortest_segment] = Distance.segment2line(shape, this);\n                return [distance, shortest_segment.reverse()];\n            }\n\n            if (shape instanceof Flatten.Arc) {\n                let [distance, shortest_segment] = Distance.arc2line(shape, this);\n                return [distance, shortest_segment.reverse()];\n            }\n\n            if (shape instanceof Flatten.Polygon) {\n                let [distance, shortest_segment] = Distance.shape2polygon(this, shape);\n                return [distance, shortest_segment];\n            }\n        }\n\n        /**\n         * Return string to draw svg segment representing line inside given box\n         * @param {Box} box Box representing drawing area\n         * @param {Object} attrs - json structure with attributes of svg circle element\n         */\n        svg(box, attrs = {}) {\n            let ip = Line.intersectLine2Box(this, box);\n            if (ip.length === 0)\n                return \"\";\n            let ps = ip[0];\n            let pe = ip.length == 2 ? ip[1] : ip.find( pt => !pt.equalTo(ps) );\n            if (pe === undefined) pe = ps;\n            let segment = new Flatten.Segment(ps, pe);\n            return segment.svg(attrs);\n        }\n\n        static points2norm(pt1, pt2) {\n            if (pt1.equalTo(pt2)) {\n                throw Flatten.Errors.ILLEGAL_PARAMETERS;\n            }\n            let vec = new Flatten.Vector(pt1, pt2);\n            let unit = vec.normalize();\n            return unit.rotate90CCW();\n        }\n\n        static intersectLine2Line(line1, line2) {\n            let ip = [];\n\n            let [A1, B1, C1] = line1.standard;\n            let [A2, B2, C2] = line2.standard;\n\n            /* Cramer's rule */\n            let det = A1*B2 - B1*A2;\n            let detX = C1*B2 - B1*C2;\n            let detY = A1*C2 - C1*A2;\n\n            if (!Flatten.Utils.EQ_0(det)) {\n                let new_ip = new Flatten.Point( detX/det, detY/det );\n                ip.push(new_ip);\n            }\n            return ip;\n        }\n\n        static intersectLine2Circle(line, circle) {\n            let ip = [];\n            let prj = circle.pc.projectionOn(line);            // projection of circle center on line\n            let dist = circle.pc.distanceTo(prj)[0];           // distance from circle center to projection\n\n            if (Flatten.Utils.EQ(dist, circle.r)) {            // line tangent to circle - return single intersection point\n                ip.push(prj);\n            }\n            else if (Flatten.Utils.LT(dist, circle.r)) {       // return two intersection points\n                let delta = Math.sqrt(circle.r*circle.r - dist*dist);\n                let v_trans, pt;\n\n                v_trans = line.norm.rotate90CCW().multiply(delta);\n                pt = prj.translate(v_trans);\n                ip.push(pt);\n\n                v_trans = line.norm.rotate90CW().multiply(delta);\n                pt = prj.translate(v_trans);\n                ip.push(pt);\n            }\n            return ip;\n        }\n\n        static intersectLine2Box(line, box) {\n            let pts = [\n                new Flatten.Point(box.xmin, box.ymin),\n                new Flatten.Point(box.xmax, box.ymin),\n                new Flatten.Point(box.xmax, box.ymax),\n                new Flatten.Point(box.xmin, box.ymax)\n            ];\n            let segs = [\n                new Flatten.Segment(pts[0], pts[1]),\n                new Flatten.Segment(pts[1], pts[2]),\n                new Flatten.Segment(pts[2], pts[3]),\n                new Flatten.Segment(pts[3], pts[0])\n            ];\n\n            let ips =  [];\n\n            for(let seg of segs) {\n                let ips_tmp = seg.intersect(line);\n                for (let ip of ips_tmp) {\n                    ips.push(ip);\n                }\n            };\n            return ips;\n        }\n\n        static intersectLine2Arc(line, arc) {\n            let ip = [];\n\n            if (Line.intersectLine2Box(line, arc.box).length == 0) {\n                return ip;\n            }\n\n            let circle = new Flatten.Circle(arc.pc, arc.r);\n            let ip_tmp = line.intersect(circle);\n            for (let pt of ip_tmp) {\n                if (pt.on(arc)) {\n                    ip.push(pt);\n                }\n            }\n\n            return ip;\n        }\n    };\n\n    /**\n     * Function to create line equivalent to \"new\" constructor\n     * @param args\n     */\n    Flatten.line = (...args) => new Flatten.Line(...args);\n};\n","/**\n * Created by Alex Bol on 2/19/2017.\n */\n\n\"use strict\";\n\nmodule.exports = function(Flatten) {\n    /**\n     * Class representing a vector\n     * @type {Vector}\n     */\n    Flatten.Vector = class Vector {\n        /**\n         * Vector may be constructed by two points, or by two float numbers,\n         * or by array of two numbers\n         * @param {Point} ps - start point\n         * @param {Point} pe - end point\n         */\n        constructor(...args) {\n            /**\n             * x-coordinate of a vector (float number)\n             * @type {number}\n             */\n            this.x = 0;\n            /**\n             * y-coordinate of a vector (float number)\n             * @type {number}\n             */\n            this.y = 0;\n\n            /* return zero vector */\n            if (args.length === 0) {\n                return;\n            }\n\n            if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\n                let arr = args[0];\n                if (typeof(arr[0]) == \"number\" && typeof(arr[1]) == \"number\") {\n                    this.x = arr[0];\n                    this.y = arr[1];\n                    return;\n                }\n            }\n\n            if (args.length === 2) {\n                let a1 = args[0];\n                let a2 = args[1];\n\n                if (typeof(a1) == \"number\" && typeof(a2) == \"number\") {\n                    this.x = a1;\n                    this.y = a2;\n                    return;\n                }\n\n                if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\n                    this.x = a2.x - a1.x;\n                    this.y = a2.y - a1.y;\n                    return;\n                }\n\n            }\n\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\n        }\n\n        /**\n         * Method clone returns new instance of Vector\n         * @returns {Vector}\n         */\n        clone() {\n            return new Vector(this.x, this.y);\n        }\n\n        /**\n         * Slope of the vector in radians from 0 to 2PI\n         * @returns {number}\n         */\n        get slope() {\n            let angle = Math.atan2(this.y, this.x);\n            if (angle<0) angle = 2*Math.PI + angle;\n            return angle;\n        }\n\n        /**\n         * Length of vector\n         * @returns {number}\n         */\n        get length() {\n            return Math.sqrt(this.dot(this));\n        }\n\n        /**\n         * Returns true if vectors are equal up to [DP_TOL]{@link http://localhost:63342/flatten-js/docs/global.html#DP_TOL}\n         * tolerance\n         * @param {Vector} v\n         * @returns {boolean}\n         */\n        equalTo(v) {\n            return Flatten.Utils.EQ(this.x, v.x) && Flatten.Utils.EQ(this.y, v.y);\n        }\n\n        /**\n         * Returns new vector multiplied by scalar\n         * @param {number} scalar\n         * @returns {Vector}\n         */\n        multiply(scalar) {\n            return ( new Vector(scalar * this.x, scalar * this.y) );\n        }\n\n        /**\n         * Returns scalar product (dot product) of two vectors <br/>\n         * <code>dot_product = (this * v)</code>\n         * @param {Vector} v Other vector\n         * @returns {number}\n         */\n        dot(v) {\n            return ( this.x * v.x + this.y * v.y );\n        }\n\n        /**\n         * Returns vector product (cross product) of two vectors <br/>\n         * <code>cross_product = (this x v)</code>\n         * @param {Vector} v Other vector\n         * @returns {number}\n         */\n        cross(v) {\n            return ( this.x * v.y - this.y * v.x );\n        }\n\n        /**\n         * Returns unit vector.<br/>\n         * Throw error if given vector has zero length\n         * @returns {Vector}\n         */\n        normalize() {\n            if (!Flatten.Utils.EQ_0(this.length)) {\n                return ( new Vector(this.x / this.length, this.y / this.length) );\n            }\n            throw Flatten.Errors.ZERO_DIVISION;\n        }\n\n        /**\n         * Returns new vector rotated by given angle,\n         * positive angle defines rotation in counter clockwise direction,\n         * negative - in clockwise direction\n         * @param {number} angle - Angle in radians\n         * @returns {Vector}\n         */\n        rotate(angle) {\n            let point = new Flatten.Point(this.x, this.y);\n            let rpoint = point.rotate(angle);\n            return new Flatten.Vector(rpoint.x, rpoint.y);\n        }\n\n        /**\n         * Returns vector rotated 90 degrees counter clockwise\n         * @returns {Vector}\n         */\n        rotate90CCW() {\n            return new Flatten.Vector(-this.y, this.x);\n        };\n\n        /**\n         * Returns vector rotated 90 degrees clockwise\n         * @returns {Vector}\n         */\n        rotate90CW() {\n            return new Flatten.Vector(this.y, -this.x);\n        };\n\n        /**\n         * Return inverted vector\n         * @returns {Vector}\n         */\n        invert() {\n            return new Flatten.Vector(-this.x, -this.y);\n        }\n\n        /**\n         * Return result of addition of other vector to this vector as a new vector\n         * @param {Vector} v Other vector\n         * @returns {Vector}\n         */\n        add(v) {\n            return new Flatten.Vector(this.x + v.x, this.y + v.y);\n        }\n\n        /**\n         * Return result of subtraction of other vector from current vector as a new vector\n         * @param {Vector} v Another vector\n         * @returns {Vector}\n         */\n        subtract(v) {\n            return new Flatten.Vector(this.x - v.x, this.y - v.y);\n        }\n\n        /**\n         * Return angle between this vector and other vector. <br/>\n         * Angle is measured from 0 to 2*PI in the counter clockwise direction\n         * from current vector to other.\n         * @param {Vector} v Another vector\n         * @returns {number}\n         */\n        angleTo(v) {\n            let norm1 = this.normalize();\n            let norm2 = v.normalize();\n            let angle = Math.atan2(norm1.cross(norm2), norm1.dot(norm2));\n            if (angle<0) angle += 2*Math.PI;\n            return angle;\n        }\n\n        /**\n         * Return vector projection of the current vector on another vector\n         * @param {Vector} v Another vector\n         * @returns {Vector}\n         */\n        projectionOn(v){\n            let n = v.normalize();\n            let d = this.dot(n);\n            return n.multiply(d);\n        }\n    };\n\n    /**\n     * Function to create vector equivalent to \"new\" constructor\n     * @param args\n     */\n    Flatten.vector = (...args) => new Flatten.Vector(...args);\n};\n","/**\n * Created by Alex Bol on 2/18/2017.\n */\n\n/**\n *\n * @param Flatten\n */\nmodule.exports = function(Flatten) {\n    /**\n     *\n     * Class representing a point\n     * @type {Point}\n     */\n    Flatten.Point = class Point {\n        /**\n         * Point may be constructed by two numbers, or by array of two numbers\n         * @param {number} x - x-coordinate (float number)\n         * @param {number} y - y-coordinate (float number)\n         */\n        constructor(...args) {\n            /**\n             * x-coordinate (float number)\n             * @type {number}\n             */\n            this.x = 0;\n            /**\n             * y-coordinate (float number)\n             * @type {number}\n             */\n            this.y = 0;\n\n            if (args.length === 0) {\n                return;\n            }\n\n            if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\n                let arr = args[0];\n                if (typeof(arr[0]) == \"number\" && typeof(arr[1]) == \"number\") {\n                    this.x = arr[0];\n                    this.y = arr[1];\n                    return;\n                }\n            }\n\n            if (args.length === 2) {\n                if (typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\n                    this.x = args[0];\n                    this.y = args[1];\n                    return;\n                }\n            }\n\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\n\n        }\n\n        /**\n         * Returns bounding box of a point\n         * @returns {Box}\n         */\n        get box() {\n            return new Flatten.Box(this.x, this.y, this.x, this.y);\n        }\n\n        /**\n         * Method clone returns new copied instance of point\n         * @returns {Point}\n         */\n        clone() {\n            return new Flatten.Point(this.x, this.y);\n        }\n\n        get vertices() {\n            return [this.clone()];\n        }\n\n        /**\n         * Returns true if points are equal up to [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\n         * @param {Point} pt Query point\n         * @returns {boolean}\n         */\n        equalTo(pt) {\n            return Flatten.Utils.EQ(this.x, pt.x) && Flatten.Utils.EQ(this.y, pt.y);\n        }\n\n        /**\n         * Defines predicate \"less than\" between points. Returns true if the point is less than query points, false otherwise <br/>\n         * By definition point1 < point2 if {point1.y < point2.y || point1.y == point2.y && point1.x < point2.y <br/>\n         * Numeric values compared with [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\n         * @param {Point} pt Query point\n         * @returns {boolean}\n         */\n        lessThan(pt) {\n            if (Flatten.Utils.LT(this.y, pt.y))\n                return true;\n            if (Flatten.Utils.EQ(this.y, pt.y) && Flatten.Utils.LT(this.x, pt.x))\n                return true;\n            return false;\n        }\n\n        /**\n         * Returns new point rotated by given angle around given center point.\n         * If center point is omitted, rotates around zero point (0,0).\n         * Positive value of angle defines rotation in counter clockwise direction,\n         * negative angle defines rotation in clockwise clockwise direction\n         * @param {number} angle - angle in radians\n         * @param {Point} [center=(0,0)] center\n         * @returns {Point}\n         */\n        rotate(angle, center = {x:0, y:0}) {\n            var x_rot = center.x + (this.x - center.x) * Math.cos(angle) - (this.y - center.y) * Math.sin(angle);\n            var y_rot = center.y + (this.x - center.x) * Math.sin(angle) + (this.y - center.y) * Math.cos(angle);\n\n            return new Flatten.Point(x_rot, y_rot);\n        }\n\n        /**\n         * Returns new point translated by given vector.\n         * Translation vector may by also defined by a pair of numbers.\n         * @param {Vector} vector - Translation vector defined as Flatten.Vector or\n         * @param {number|number} - Translation vector defined as pair of numbers\n         * @returns {Point}\n         */\n        translate(...args) {\n            if (args.length == 1 && (args[0] instanceof Flatten.Vector)) {\n                return new Flatten.Point(this.x + args[0].x, this.y + args[0].y);\n            }\n\n            if (args.length == 2 && typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\n                return new Flatten.Point(this.x + args[0], this.y + args[1]);\n            }\n\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\n        }\n\n        /**\n         * Return new point transformed by affine transformation matrix m\n         * @param {Matrix} m - affine transformation matrix (a,b,c,d,tx,ty)\n         * @returns {Point}\n         */\n        transform(m) {\n            let [x,y] = m.transform([this.x,this.y]);\n            return new Flatten.Point(x,y)\n        }\n\n        /**\n         * Returns projection point on given line\n         * @param {Line} line Line this point be projected on\n         * @returns {Point}\n         */\n        projectionOn(line) {\n            if (this.equalTo(line.pt))                   // this point equal to line anchor point\n                return this.clone();\n\n            let vec = new Flatten.Vector(this, line.pt);\n            if (Flatten.Utils.EQ_0(vec.cross(line.norm)))    // vector to point from anchor point collinear to normal vector\n                return line.pt.clone();\n\n            let dist = vec.dot(line.norm);             // signed distance\n            let proj_vec = line.norm.multiply(dist);\n            return this.translate(proj_vec);\n        }\n\n        /**\n         * Returns true if point belongs to the \"left\" semi-plane, which means, point belongs to the same semi plane where line normal vector points to\n         * Return false if point belongs to the \"right\" semi-plane or to the line itself\n         * @param {Line} line Query line\n         * @returns {boolean}\n         */\n        leftTo(line) {\n            let vec = new Flatten.Vector(line.pt, this);\n            let onLeftSemiPlane = Flatten.Utils.GT(vec.dot(line.norm), 0);\n            return onLeftSemiPlane;\n        }\n\n        /**\n         * Calculate distance and shortest segment from point to shape and return as array [distance, shortest segment]\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\n         * @returns {number} distance from point to shape\n         * @returns {Segment} shortest segment between point and shape (started at point, ended at shape)\n         */\n        distanceTo(shape) {\n            let {Distance} = Flatten;\n\n            if (shape instanceof Point) {\n                let dx = shape.x - this.x;\n                let dy = shape.y - this.y;\n                return [Math.sqrt(dx*dx + dy*dy), new Flatten.Segment(this, shape)];\n            }\n\n            if (shape instanceof Flatten.Line) {\n                return Distance.point2line(this, shape);\n            }\n\n            if (shape instanceof Flatten.Circle) {\n                return Distance.point2circle(this, shape);\n            }\n\n            if (shape instanceof Flatten.Segment) {\n                return Distance.point2segment(this, shape);\n            }\n\n            if (shape instanceof Flatten.Arc) {\n                // let [dist, ...rest] = Distance.point2arc(this, shape);\n                // return dist;\n                return Distance.point2arc(this, shape);\n            }\n\n            if (shape instanceof Flatten.Polygon) {\n                // let [dist, ...rest] = Distance.point2polygon(this, shape);\n                // return dist;\n                return Distance.point2polygon(this, shape);\n            }\n\n            if (shape instanceof Flatten.PlanarSet) {\n                return Distance.shape2planarSet(this, shape);\n            }\n        }\n\n        /**\n         * Returns true if point is on a shape, false otherwise\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon\n         * @returns {boolean}\n         */\n        on(shape) {\n            if (shape instanceof Flatten.Point) {\n                return this.equalTo(shape);\n            }\n\n            if (shape instanceof Flatten.Line) {\n                return shape.contains(this);\n            }\n\n            if (shape instanceof Flatten.Circle) {\n                return shape.contains(this);\n            }\n\n            if (shape instanceof  Flatten.Segment) {\n                return shape.contains(this);\n            }\n\n            if (shape instanceof Flatten.Arc) {\n                return shape.contains(this);\n            }\n\n            if (shape instanceof Flatten.Polygon) {\n                return shape.contains(this);\n            }\n        }\n\n        /**\n         * Return string to draw point in svg as circle with radius \"r\" <br/>\n         * Accept any valid attributes of svg elements as svg object\n         * Defaults attribues are: <br/>\n         * {\n         *    r:\"3\",\n         *    stroke:\"black\",\n         *    strokeWidth:\"1\",\n         *    fill:\"red\"\n         * }\n         * @param {Object} attrs - Any valid attributes of svg circle element, like \"r\", \"stroke\", \"strokeWidth\", \"fill\"\n         * @returns {String}\n         */\n        svg(attrs = {}) {\n            let {r, stroke, strokeWidth, fill, id, className} = attrs;\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\n            return `\\n<circle cx=\"${this.x}\" cy=\"${this.y}\" r=\"${r || 3}\" stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"red\"}\" ${id_str} ${class_str} />`;\n        }\n\n    };\n\n    /**\n     * Function to create point equivalent to \"new\" constructor\n     * @param args\n     */\n    Flatten.point = (...args) => new Flatten.Point(...args);\n};\n","/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\nlet Interval = class Interval {\r\n    constructor(low, high) {\r\n        this.low = low;\r\n        this.high = high;\r\n    }\r\n\r\n    get max() {\r\n        return this.high;\r\n    }\r\n\r\n    interval(low, high) {\r\n        return new Interval(low, high);\r\n    }\r\n\r\n    clone() {\r\n        return new Interval(this.low, this.high);\r\n    }\r\n\r\n    less_than(other_interval) {\r\n        return this.low < other_interval.low ||\r\n            this.low == other_interval.low && this.high < other_interval.high;\r\n    }\r\n\r\n    equal_to(other_interval) {\r\n        return this.low == other_interval.low && this.high == other_interval.high;\r\n    }\r\n\r\n    intersect(other_interval) {\r\n        return !this.not_intersect(other_interval);\r\n    }\r\n\r\n    not_intersect(other_interval) {\r\n        return (this.high < other_interval.low || other_interval.high < this.low);\r\n    }\r\n\r\n    output() {\r\n        return [this.low, this.high];\r\n    }\r\n\r\n    maximal_val(val1, val2) {\r\n        return Math.max(val1, val2);\r\n    }\r\n\r\n    val_less_than(val1, val2 ) {     // trait to compare max property with item ?\r\n        return val1 < val2;\r\n    }\r\n};\r\n\r\nmodule.exports = Interval;","/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\n'use strict';\r\n\r\n// let defaultTraits = require('../utils/numeric_traits');\r\nlet Interval = require('../classes/interval');\r\nlet {RB_TREE_COLOR_RED, RB_TREE_COLOR_BLACK} = require('../utils/constants');\r\n\r\nlet Node = class Node {\r\n    constructor(key = undefined, value = undefined,\r\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\r\n        this.left = left;                     // reference to left child node\r\n        this.right = right;                   // reference to right child node\r\n        this.parent = parent;                 // reference to parent node\r\n        this.color = color;\r\n\r\n        this.item = {key: key, value: value};   // key is supposed to be       instance of Interval\r\n\r\n        /* If not, this should by an array of two numbers */\r\n        if (key && key instanceof Array && key.length == 2) {\r\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\r\n                this.item.key = new Interval(Math.min(key[0], key[1]), Math.max(key[0], key[1]));\r\n            }\r\n        }\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n    }\r\n\r\n    isNil() {\r\n        return (this.item.key === undefined && this.item.value === undefined &&\r\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\r\n    }\r\n\r\n    less_than(other_node) {\r\n        return this.item.key.less_than(other_node.item.key);\r\n    }\r\n\r\n    equal_to(other_node) {\r\n        let value_equal = true;\r\n        if (this.item.value && other_node.item.value) {\r\n            value_equal = this.item.value.equal_to ? this.item.value.equal_to(other_node.item.value) :\r\n                this.item.value == other_node.item.value;\r\n        }\r\n        return this.item.key.equal_to(other_node.item.key) && value_equal;\r\n    }\r\n\r\n    intersect(other_node) {\r\n        return this.item.key.intersect(other_node.item.key);\r\n    }\r\n\r\n    copy_data(other_node) {\r\n        this.item.key = other_node.item.key.clone();\r\n        this.item.value = other_node.item.value;\r\n    }\r\n\r\n    update_max() {\r\n        // use key (Interval) max property instead of key.high\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n        if (this.right && this.right.max) {\r\n            let maximal_val = this.item.key.maximal_val;\r\n            this.max = maximal_val(this.max, this.right.max);\r\n        }\r\n        if (this.left && this.left.max) {\r\n            let maximal_val = this.item.key.maximal_val;\r\n            this.max = maximal_val(this.max, this.left.max);\r\n        }\r\n    }\r\n\r\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\r\n    not_intersect_left_subtree(search_node) {\r\n        let val_less_than = this.item.key.val_less_than;\r\n        let high = this.left.max.high ? this.left.max.high : this.left.max;\r\n        return val_less_than(high, search_node.item.key.low);\r\n    }\r\n\r\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\r\n    not_intersect_right_subtree(search_node) {\r\n        let val_less_than = this.item.key.val_less_than;\r\n        let low = this.right.max.low ? this.right.max.low : this.right.item.key.low;\r\n        return val_less_than(search_node.item.key.high, low);\r\n    }\r\n};\r\n\r\nmodule.exports = Node;\r\n\r\n","/**\n * Created by Alex Bol on 3/12/2017.\n */\n\n\"use strict\";\n\n// require(\"babel-polyfill\");\n\nlet IntervalTree = require('flatten-interval-tree');\n\nmodule.exports = function (Flatten) {\n    /**\n     * Class representing a planar set - a generic container with ability to keep and retrieve shapes and\n     * perform spatial queries. Planar set is an extension of Set container, so it supports\n     * Set properties and methods\n     */\n    Flatten.PlanarSet = class PlanarSet extends Set {\n        /**\n         * Create new empty instance of PlanarSet\n         */\n        constructor() {\n            super();\n            this.index = new IntervalTree();\n        }\n\n        /**\n         * Add new shape to planar set and to its spatial index.<br/>\n         * If shape already exist, it will not be added again.\n         * This happens with no error, it is possible to use <i>size</i> property to check if\n         * a shape was actually added.<br/>\n         * Method returns planar set object updated and may be chained\n         * @param {Shape} shape - shape to be added, should have valid <i>box</i> property\n         * @returns {PlanarSet}\n         */\n        add(shape) {\n            let size = this.size;\n            super.add(shape);\n            // size not changed - item not added, probably trying to add same item twice\n            if (this.size > size) {\n                let node = this.index.insert(shape.box, shape);\n            }\n            return this;         // in accordance to Set.add interface\n        }\n\n        /**\n         * Delete shape from planar set. Returns true if shape was actually deleted, false otherwise\n         * @param {Shape} shape - shape to be deleted\n         * @returns {boolean}\n         */\n        delete(shape) {\n            let deleted = super.delete(shape);\n            if (deleted) {\n                this.index.remove(shape.box, shape);\n            }\n            return deleted;\n        }\n\n        // update(shape) {\n        //     if (super.has(shape)) {\n        //         this.delete(shape);\n        //     }\n        //     this.add(shape);\n        //\n        //     return this;\n        // }\n\n        clear() {\n\n        }\n\n        /**\n         * 2d range search in planar set.<br/>\n         * Returns array of all shapes in planar set which bounding box is intersected with query box\n         * @param {Box} box - query box\n         * @returns {Shapes[]}\n         */\n        search(box) {\n            let resp = this.index.search(box);\n            return resp;\n        }\n\n        /**\n         * Point location test. Returns array of shapes which contains given point\n         * @param {Point} point - query point\n         * @returns {Array}\n         */\n        hit(point) {\n            let box = new Flatten.Box(point.x - 1, point.y - 1, point.x + 1, point.y + 1);\n            let resp = this.index.search(box);\n            return resp.filter((shape) => point.on(shape));\n        }\n\n        /**\n         * Returns svg string to draw all shapes in planar set\n         * @returns {String}\n         */\n        svg() {\n            let svgcontent = [...this].reduce((acc, shape) => acc + shape.svg(), \"\");\n            return svgcontent;\n        }\n    }\n};\n\n","\"use strict\";\n\nmodule.exports = function(Flatten) {\n    /**\n     * Class representing an affine transformation 3x3 matrix:\n     * <pre>\n     *      [ a  c  tx\n     * A =    b  d  ty\n     *        0  0  1  ]\n     * </pre\n     * @type {Matrix}\n     */\n    Flatten.Matrix = class Matrix {\n        /**\n         * Construct new instance of affine transformation matrix <br/>\n         * If parameters omitted, construct identity matrix a = 1, d = 1\n         * @param {number} a - position(0,0)   sx*cos(alpha)\n         * @param {number} b - position (0,1)  sx*sin(alpha)\n         * @param {number} c - position (1,0)  -sy*sin(alpha)\n         * @param {number} d - position (1,1)  sy*cos(alpha)\n         * @param {number} tx - position (2,0) translation by x\n         * @param {number} ty - position (2,1) translation by y\n         */\n        constructor(a=1,b=0,c=0,d=1,tx=0,ty=0) {\n            this.a = a;\n            this.b = b;\n            this.c = c;\n            this.d = d;\n            this.tx = tx;\n            this.ty = ty;\n        }\n\n        /**\n         * Returns a clone of the Matrix instance.\n         * @return {Matrix}\n         **/\n        clone() {\n            return new Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);\n        };\n\n        /**\n         * Transform vector [x,y] using transformation matrix. <br/>\n         * Vector [x,y] is an abstract array[2] of numbers and not a FlattenJS object <br/>\n         * The result is also an abstract vector [x',y'] = A * [x,y]:\n         * <code>\n         * [x'       [ ax + by + tx\n         *  y'   =     cx + dy + ty\n         *  1]                    1 ]\n         * </code>\n         * @param {number[]} vector - array[2] of numbers\n         * @returns {number[]} transformation result - array[2] of numbers\n         */\n        transform(vector) {\n            return [\n                vector[0]*this.a+vector[1]*this.c+this.tx,\n                vector[0]*this.b+vector[1]*this.d+this.ty\n            ]\n        };\n\n        /**\n         * Returns result of multiplication of this matrix by other matrix\n         * @param {Matrix} other_matrix - matrix to multiply by\n         * @returns {Matrix}\n         */\n        multiply(other_matrix) {\n            return new Matrix(\n                this.a*other_matrix.a + this.c*other_matrix.b,\n                this.b*other_matrix.a + this.d*other_matrix.b,\n                this.a*other_matrix.c + this.c*other_matrix.d,\n                this.b*other_matrix.c + this.d*other_matrix.d,\n                this.a*other_matrix.tx + this.c*other_matrix.ty + this.tx,\n                this.b*other_matrix.tx + this.d*other_matrix.ty + this.ty\n            )\n        };\n\n        /**\n         * Return new matrix as a result of multiplication of the current matrix\n         * by the matrix(1,0,0,1,tx,ty)\n         * @param {number} tx - translation by x\n         * @param {number} ty - translation by y\n         * @returns {Matrix}\n         */\n        translate(...args) {\n            let tx, ty;\n            if (args.length == 1 && (args[0] instanceof Flatten.Vector)) {\n                tx = args[0].x;\n                ty = args[0].y;\n            }\n            else if (args.length == 2 && typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\n                tx = args[0];\n                ty = args[1];\n            }\n            else {\n                throw Flatten.Errors.ILLEGAL_PARAMETERS;\n            }\n            return this.multiply(new Matrix(1,0,0,1,tx,ty))\n        };\n\n        /**\n         * Return new matrix as a result of multiplication of the current matrix\n         * by the matrix that defines rotation by given angle (in radians) around\n         * point (0,0) in counter clockwise direction\n         * @param angle\n         * @returns {Matrix}\n         */\n        rotate(angle) {\n            let cos = Math.cos(angle);\n            let sin = Math.sin(angle);\n            return this.multiply(new Matrix(cos,sin,-sin,cos,0,0));\n        };\n\n        /**\n         * Return new matrix as result of mutiplication of the current matrix\n         * by the matrix (sx,0,0,sy,0,0) that defines scaling\n         * @param sx\n         * @param sy\n         * @returns {Matrix}\n         */\n        scale(sx, sy) {\n            return this.multiply(new Matrix(sx,0,0,sy,0,0));\n        };\n\n        /**\n         * Returns true if two matrix are equal parameter by parameter\n         * @param {Matrix} matrix - other matrix\n         * @returns {boolean} true if equal, false otherwise\n         */\n        equalTo(matrix) {\n            if (!Flatten.Utils.EQ(this.tx, matrix.tx)) return false;\n            if (!Flatten.Utils.EQ(this.ty, matrix.ty)) return false;\n            if (!Flatten.Utils.EQ(this.a, matrix.a)) return false;\n            if (!Flatten.Utils.EQ(this.b, matrix.b)) return false;\n            if (!Flatten.Utils.EQ(this.c, matrix.c)) return false;\n            if (!Flatten.Utils.EQ(this.d, matrix.d)) return false;\n            return true;\n        };\n    };\n\n    /**\n     * Function to create matrix equivalent to \"new\" constructor\n     * @param args\n     */\n    Flatten.matrix = (...args) => new Flatten.Matrix(...args);\n};\n","/**\n * Created by Alex Bol on 2/19/2017.\n */\nmodule.exports = {\n    ILLEGAL_PARAMETERS: new ReferenceError('Illegal Parameters'),\n    ZERO_DIVISION: new Error('Zero division')\n};\n\n","/**\n * Created by Alex Bol on 2/18/2017.\n */\n\nconst DP_TOL = 0.000001;\nconst DECIMALS = 3;\n\nmodule.exports = {\n    DP_TOL: DP_TOL,\n    /**\n     * @return {boolean}\n     */\n    EQ_0: function(x) {\n        return ( (x) < DP_TOL && (x) > -DP_TOL );\n    },\n    /**\n     * @return {boolean}\n     */\n    EQ: function(x,y) {\n        return ( (x)-(y) <  DP_TOL && (x)-(y) > -DP_TOL );\n    },\n    /**\n     * @return {boolean}\n     */\n    GT: (x,y) => {\n        return ( (x)-(y) >  DP_TOL );\n    },\n    /**\n     * @return {boolean}\n     */\n    GE: (x,y) => {\n        return ( (x)-(y) > -DP_TOL );\n    },\n    /**\n     * @return {boolean}\n     */\n    LT: (x,y) => {\n        return ( (x)-(y) < -DP_TOL )\n    },\n    /**\n     * @return {boolean}\n     */\n    LE: (x,y) => {\n        return ( (x)-(y) <  DP_TOL );\n    }\n};\n","/**\n * Created by Alex Bol on 2/18/2017.\n */\n'use strict';\n\nlet Utils = require(\"./utils/utils\");\nlet Errors = require(\"./utils/errors\");\n\n/**\n * FlattenJS - library for 2d geometry\n * @type {Flatten}\n */\nlet Flatten = class Flatten {\n    constructor() {\n        this.DP_TOL = Utils.DP_TOL;\n        this.CCW = true;\n        this.CW = false;\n        this.ORIENTATION = {CCW:-1, CW:1, NOT_ORIENTABLE: 0};\n        this.PIx2 = 2 * Math.PI;\n        this.PI_2 = 0.5 * Math.PI;\n        this.INSIDE = 1;\n        this.OUTSIDE = 0;\n        this.BOUNDARY = 2;\n        this.CONTAINS = 3;\n        this.INTERLACE = 4;\n        this.CLIP_INSIDE = 1;\n        this.CLIP_OUTSIDE = 0;\n        this.BOOLEAN_UNION = 1;\n        this.BOOLEAN_INTERSECT = 2;\n        this.BOOLEAN_SUBTRACT = 3;\n        this.OVERLAP_SAME = 1;\n        this.OVERLAP_OPPOSITE = 2;\n        this.Utils = Utils;\n        this.Errors = Errors;\n    }\n};\n\nlet f = new Flatten();\n\nrequire(\"./classes/matrix\")(f);\nrequire(\"./data_structures/planar_set\")(f);\nrequire(\"./classes/point\")(f);\nrequire(\"./classes/vector\")(f);\nrequire(\"./classes/line\")(f);\nrequire(\"./classes/circle\")(f);\nrequire(\"./classes/segment\")(f);\nrequire(\"./classes/arc\")(f);\nrequire(\"./classes/box\")(f);\nrequire(\"./classes/edge\")(f);\nrequire(\"./classes/face\")(f);\nrequire(\"./classes/ray\")(f);\nrequire(\"./algorithms/ray_shooting\")(f);\nrequire(\"./classes/polygon\")(f);\nrequire(\"./algorithms/distance\")(f);\n\nmodule.exports = f;\n"],"sourceRoot":""}